{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"SysReptor Pentest Report Creator","text":"Pentest ReportsEasy As Pie. <ul> <li> <p>Customize Reports</p> <p> </p> <p>Design in HTML.</p> <p>As easy as falling off a log.</p> </li> <li> <p>Write Reports</p> <p> </p> <p>Write in Markdown.</p> <p>It gives you an easy ride.</p> </li> <li> <p>Render and Download</p> <p> </p> <p>Render to PDF.</p> <p>Easier done than said.</p> </li> <li> <p>Operate Platform</p> <p> </p> <p>Self-Hosted or Cloud.</p> <p>Easy peasy lemon squeezy.</p> </li> </ul> <p> Get Started</p> <p></p>      Pentesters taking reporting easy:  <p></p> <p></p> <p></p> <p> Book a Demo</p> <p></p> <p> </p> Create finding from template <p> </p> Export report as PDF"},{"location":"contact-us/","title":"Contact Us","text":"<p> +43 660 923 40 60 (Signal Messenger preferred) hello@syslifters.com aron@syslifters.com ( S/MIME cer/p7b)  LinkedIn Twitter GitHub</p>"},{"location":"data-privacy/","title":"Privacy Policy","text":"<p>The protection of your personal data is very important to us at Syslifters. We therefore process your data exclusively on the basis of the statutory provisions (GDPR, Austrian TKG 2003). In this data protection information we inform you about the most important aspects of data processing on our website.</p> <p>This Data Privacy Policy applies to docs.syslifters.com and is effective as of June 1, 2022.</p> <p>\u200d</p>"},{"location":"data-privacy/#hosting","title":"Hosting","text":"<p>We host the website on GitHub. The provider is GitHub B.V., Prins Bernhardplein 200, Amsterdam, 1097JB, The Netherlands (hereinafter: GitHub). When you visit the website, GitHub collects various log files including your IP addresses.</p> <p>For details, please refer to the GitHub Privacy Policy.</p> <p>The use of GitHub is based on Art. 6 para. 1 lit. f DSGVO. We have a legitimate interest in ensuring that our website is presented as reliably as possible. Insofar as a corresponding consent has been requested, the processing is carried out exclusively on the basis of Art. 6 para. 1 lit. a DSGVO, insofar as the consent includes the storage of cookies or access to information in the user's terminal device (e.g. device fingerprinting). The consent can be revoked at any time.</p>"},{"location":"data-privacy/#your-rights","title":"Your rights","text":"<p>In principle, you have the rights to information, correction, deletion, restriction, data portability, revocation and objection. If you believe that the processing of your data violates data protection law or your data protection rights have been violated in any other way, you have the right to file a complaint with the supervisory authority. In Austria, this is the data protection authority, E-Mail: dsb@dsb.gv.at, Web: https://www.dsb.gv.at/.</p>"},{"location":"data-privacy/#changes-to-this-privacy-policy","title":"Changes to this privacy policy","text":"<p>We reserve the right to change our privacy policy if necessary, for example due to technical developments or legal changes. The latest version of the privacy policy is published on our website. Please make sure that you have the latest version.</p> <p>You can reach us as follows:</p> <p>Syslifters GmbH Eitzersthal 75, 2013 G\u00f6llersdorf E-Mail: hello@syslifters.com Phone: +43 660 923 40 60</p> <p>\u200dAs of: 01. June 2022</p>"},{"location":"features-and-pricing/","title":"Features and Pricing","text":"Community  Professional Pricing (user/month) Free \u20ac 50 Deployment Self-Hosted Self-Hosted or Cloud Permissions Superusers only Role-based Easy as Users Max. 3 As licensed Fully customizable reports \u2713 \u2713 Finding Templates \u2713 \u2713 Data Encryption at rest \u2713 \u2713 MFA (FIDO/WebAuthn, TOTP) \u2713 \u2713 Note Taking \u2713 \u2713 Version History X \u2713 Spell Check* X \u2713 Project Retention Times X \u2713 Easy Backups X \u2713 SSO (oAuth/OIDC) X \u2713 Project Archiving (encrypted) X \u2713  Get Started  Buy  Contact Us  Book a Demo <p> *Spell Check support: English, German, Spanish, French, Portuguese, Dutch Limited Spell Check support: Italian, Danish, Polish, Ukrainian, Romanian, Slovak, Slovenian, Greek, Swedish</p>"},{"location":"htb-reporting-with-sysreptor/","title":"Hack The Box Reporting","text":"<p>Our free cloud service to write your Hack The Box CPTS, CBBH, and CDSA reports.</p> <p>\ud83d\udcb2 Free \ud83d\udcdd Write in markdown \u2699\ufe0f Render your report to PDF \ud83d\udee1\ufe0f CPTS, CBBH, CDSA, CWEE \ud83d\ude80 Fully customizable \ud83d\udc4c No local software troubleshooting</p> <p> Sign Up (it's free) Already have an account? Login here. </p>"},{"location":"htb-reporting-with-sysreptor/#prefer-self-hosting","title":"Prefer self-hosting?","text":"<ol> <li>Install SysReptor</li> <li>Import all HTB Designs:</li> </ol> <pre><code>cd sysreptor/deploy\nurl=\"https://docs.sysreptor.com/assets/htb-designs.tar.gz\"\ncurl -s \"$url\" | docker compose exec --no-TTY app python3 manage.py importdemodata --type=design\n</code></pre>"},{"location":"htb-reporting-with-sysreptor/#hack-the-box-reports","title":"Hack The Box Reports","text":"HTB CPTS Report Demo HTB CBBH Report Demo HTB CDSA Report Demo HTB CWEE Report Demo"},{"location":"htb-reporting-with-sysreptor/#creating-htb-report","title":"Creating HTB Report","text":""},{"location":"license/","title":"SysReptor Community License 1.0 (SysReptorL)","text":""},{"location":"license/#acceptance","title":"Acceptance","text":"<p>In order to get any Permissions to Use the Software under the  SysReptorL, you must agree to it as both strict obligations  and conditions to all your Licenses.</p>"},{"location":"license/#copyright-license","title":"Copyright License","text":"<p>The licensor grants you a non-exclusive copyright Permission  to Use the Software for everything you might do with the Software  that would otherwise infringe the licensor's copyright in it for  any permitted purpose, other than distributing the software or  making changes or new works based on the Software. Attempts to  circumvent technical License restrictions are prohibited (e.g.  to unlock or extend functionalities), even if they result from  errors in the Software. You must not use a license key that you did not obtain from us or an authorized reseller.</p>"},{"location":"license/#patent-license","title":"Patent License","text":"<p>The licensor grants you a non-exclusive patent License for the  Software that covers patent claims the licensor can license, or  becomes able to license, that you would infringe by using the  Software after its Intended Use. </p>"},{"location":"license/#internal-business-use","title":"Internal Business Use","text":"<p>Use of the Software for the internal business operations of  you and your Company is use for a permitted purpose.</p>"},{"location":"license/#personal-uses","title":"Personal Uses","text":"<p>Personal use for research, experiment, and testing for the  benefit of public knowledge, personal study, private entertainment,  hobby projects, amateur pursuits, or religious observance,  without any anticipated commercial application, is use for a  permitted purpose.</p>"},{"location":"license/#fair-use","title":"Fair Use","text":"<p>You may have \"Fair Use\" rights for the Software under the law.  The SysReptorL does not limit them unless otherwise agreed.</p> <p>Pursuant to Section 40d of the Act on Copyright and Related  Rights (Urheberrechtsgesetz, UrhG), computer programs may be  edited and reproduced within the framework of the Fair Use of  works to the extent that this is necessary for the Intended  Use of the Software by the person entitled to use it. The  Intended Use is limited to the permitted purpose of the Software  in accordance with the SysReptorL.</p>"},{"location":"license/#no-other-rights","title":"No Other Rights","text":"<p>The SysReptorL does not allow you to sublicense or transfer  any of your Licenses to anyone else or prevent the licensor  from granting Licenses to anyone else. The SysReptorL does not  imply any other Licenses than those mentioned therein.</p>"},{"location":"license/#patent-defense","title":"Patent Defense","text":"<p>If you make any written claim that the Software infringes or  contributes to infringement of any patent, your patent License  for the Software granted under this SysReptorL ends immediately. If  your Company makes such a claim, your patent License ends  immediately for work on behalf of your Company. Irrespective of the  withdrawal of Permission to Use the Software, we reserve the right  to assert claims for damages.</p>"},{"location":"license/#violations","title":"Violations","text":"<p>The first time you are notified in writing that you have violated any of these terms, or done anything with the software not covered by your licenses, your licenses can nonetheless continue if you come into full compliance with these terms, and take practical steps to correct past violations, within 32 days of receiving notice.  Otherwise, all your licenses end immediately.</p>"},{"location":"license/#no-liability","title":"No Liability","text":"<p>As far as the law allows, the Software comes \u201cas is\u201d, without  any warranty or condition, and the licensor will not be liable  to you for any damages arising out of this SysReptorL or the use  or nature of the Software, under any kind of legal claim.</p>"},{"location":"license/#definitions","title":"Definitions","text":"<p>The SysReptor Community License 1.0 (SysReptorL) is granted by  Syslifters GmbH, FN 578505v, registered office G\u00f6llersdorf  (Syslifters; we; licensor) to you.</p> <p>License: Is the overall term for the authorization to use the  Software. The term \"License\" says nothing about the copyright  classification.</p> <p>Software: is the software the licensor makes available under  these terms.</p> <p>Permission to Use the Software (Werknutzungsbewilligung):  Non-exclusive copyright Permission to Use the Software. Use  means anything you do with the software requiring one of your  licenses.</p> <p>Your Company: Is any legal entity, sole proprietorship, or  other kind of organization that you work for, plus all organizations  that have control over, are under the control of, or are under common  control with that organization. Control means ownership of  substantially all the assets of an entity, or the power to direct its  management and policies by vote, contract, or otherwise. Control can  be direct or indirect.</p> <p>Your licenses are all the licenses granted to you for the software under these terms.</p> <p>Last Updated: 24 March 2023</p>"},{"location":"notice/","title":"Third party software","text":"<p>This software relies on many Open Source Software projects. Find the licenses of those projects under the following links:</p> <ul> <li>API</li> <li>Frontend</li> <li>Markdown</li> <li>PDF Viewer</li> <li>Rendering</li> <li>SysReptor Designs</li> </ul>"},{"location":"offsec-reporting-with-sysreptor/","title":"OffSec Reporting","text":"<p>Our free cloud service to write your OffSec OSCP, OSWP, OSEP, OSWA, OSWE, OSED, OSMR, OSEE, OSDA reports.</p> <p>\ud83d\udcb2 Free \ud83d\udcdd Write in markdown \u2699\ufe0f Render your report to PDF \ud83d\udee1\ufe0f OSCP, OSWP, OSEP, OSWA, OSWE, OSED, OSMR, OSEE, OSDA \ud83d\ude80 Fully customizable \ud83d\udc4c No local software troubleshooting</p> <p> Sign Up (it's free) Already have an account? Login here. </p>"},{"location":"offsec-reporting-with-sysreptor/#prefer-self-hosting","title":"Prefer self-hosting?","text":"<ol> <li>Install SysReptor</li> <li>Import all OffSec Designs:</li> </ol> <pre><code>cd sysreptor/deploy\nurl=\"https://docs.sysreptor.com/assets/offsec-designs.tar.gz\"\ncurl -s \"$url\" | docker compose exec --no-TTY app python3 manage.py importdemodata --type=design\n</code></pre>"},{"location":"offsec-reporting-with-sysreptor/#offsec-reports","title":"OffSec Reports*","text":""},{"location":"offsec-reporting-with-sysreptor/#penetration-testing","title":"Penetration Testing","text":"OSCP Exam Report Demo OSCP Lab Report Demo OSWP Exam Report Demo OSEP Exam Report Demo"},{"location":"offsec-reporting-with-sysreptor/#web-application","title":"Web Application","text":"OSWA Exam Report Demo OSWE Exam Report Demo"},{"location":"offsec-reporting-with-sysreptor/#exploit-development","title":"Exploit Development","text":"OSED Exam Report Demo OSMR Exam Report Demo OSEE Exam Report Demo"},{"location":"offsec-reporting-with-sysreptor/#security-operations","title":"Security Operations","text":"OSDA Exam Report Demo <p> *The cover pages are based on noraj's great OSCP LaTeX templates. The structure follows the official OffSec reports (with kind permission by OffSec).</p>"},{"location":"offsec-reporting-with-sysreptor/#creating-an-oscp-exam-report","title":"Creating an OSCP Exam Report","text":"<p>     Not happy with our solution?  Check out alternatives </p>"},{"location":"oscp-reporting-tools/","title":"Tools for OSCP Reporting","text":"<ul> <li> <p> SysReptor's Online Reporting</p> <p>Easy pentest reporting tailored to OSCP reports.</p> <p>Pro tip: \ud83d\udd25 Lowest reporting efforts online!</p> <p> Sign up and start off</p> </li> <li> <p> SysReptor Self-Hosted</p> <p>Easy pentest reporting without cloud.</p> <p>Pro tip: \ud83d\udd25 Run everything local.</p> <p> Easy Peasy Lemon Squeezy.</p> </li> <li> <p> Microsoft Word</p> <p>Use the official templates from \"OffSec\".</p> <p>Pro tip: We all love Word. Don't we? </p> <p> Get your Word-Foo ready</p> </li> <li> <p> Markdown to LaTeX</p> <p>Compile your markdown with pandoc and noraj's LaTeX-template.</p> <p>Pro tip: Upload template to Overleaf and compile online!</p> <p> git clone your template</p> </li> <li> <p> Dradis self-hosted</p> <p>Get the OSCP Exam Report Kit from Dradis.</p> <p>Pro tip: Most functionality included by Dradis Professional!</p> <p> Connect to localhost</p> </li> </ul> <p></p>"},{"location":"oscp-reporting-tools/#creating-an-oscp-exam-report-with-sysreptor","title":"Creating an OSCP Exam Report with SysReptor","text":"<p> Sign Up to SysReptor</p> <p> Make sure to test your tool of choice before the exam.</p> <p>You know other tools that work well for OSCP reporting? Please write us to hello@syslifters.com.</p>"},{"location":"cli/getting-started/","title":"reptor (alpha version)","text":"<p>reptor allows you to automate pentest reporting with SysReptor.</p> <ul> <li>Create findings and notes from tool outputs</li> <li>Upload evidences (also bulk upload)</li> <li>Import data from other reporting tools</li> </ul> <p>GitHub: https://github.com/Syslifters/reptor/ Docs: https://docs.sysreptor.com/cli/getting-started Setup: https://docs.sysreptor.com/cli/setup PyPi: https://pypi.org/project/reptor/ </p>"},{"location":"cli/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8-3.11</li> <li>pip3</li> </ul>"},{"location":"cli/getting-started/#installation","title":"Installation","text":""},{"location":"cli/getting-started/#from-pypi","title":"From pypi","text":"<p><code>pip3 install reptor</code></p>"},{"location":"cli/getting-started/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>translate (requires deepl)</li> <li>ghostwriter (requires gql)</li> <li>dev (requires pytest)</li> </ul> <p>Install by <code>pip3 install reptor[translate]</code>. Install all optional dependencies using <code>pip3 install reptor[all]</code></p>"},{"location":"cli/getting-started/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/Syslifters/reptor.git\ncd reptor\npip3 install .\n</code></pre> <p>Install optional dependencies by <code>pip3 install .[all]</code>.</p>"},{"location":"cli/getting-started/#from-blackarch","title":"From BlackArch","text":"<pre><code>pacman -S reptor\n</code></pre>"},{"location":"cli/getting-started/#configuration","title":"Configuration","text":"<p>Get your API token from https:///users/self/apitokens/. <pre><code>reptor conf\nServer [https://demo.sysre.pt]: \nAPI Token [Create at https://demo.sysre.pt/users/self/apitokens/]:\nProject ID:\nStore to config to C:\\Users\\aron\\.sysreptor\\config.yaml? [y/n]:\n</code></pre> <p>You can add your configuration as environment variables. Environment variables override the config file.</p> <pre><code>export REPTOR_SERVER=\"https://demo.sysre.pt\"\nexport REPTOR_TOKEN=\"sysreptor_ZDM5NmQ5&lt;snip&gt;\"\nexport PROJECT_ID=\"3fae023a-2632-4c88-a0ea-97ab5eb64c94\"\n</code></pre>"},{"location":"cli/getting-started/#usage","title":"Usage","text":"<pre><code>usage: reptor [-h] [-s SERVER] [-t TOKEN] [-k] [-p PROJECT_ID]\n              [--private-note] [-f] [-v] [--debug] [-n NOTETITLE]\n              [--no-timestamp] [--file FILE]\n\nExamples:\n                reptor conf\n                echo \"Upload this!\" | reptor note\n                reptor file data/*\n                cat sslyze.json | reptor sslyze --json --push-findings\n                cat nmap.xml | reptor nmap --xml --upload\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         increase output verbosity (&gt; INFO)\n  --debug               sets logging to DEBUG\n  -n NOTETITLE, --notetitle NOTETITLE\n  --no-timestamp        do not prepend timestamp to note\n  --file FILE           Local file to read\n\nsubcommands:\n\n  Core:\n   conf                  Shows config and sets config\n   plugins               Allows plugin management &amp; development\n\n  Projects &amp; Templates:\n   createproject         Create a new pentest project\n   deletefindings        Deletes findings by title\n   deleteprojects        Deletes projects by title\n   exportfindings        Export your project findings as a summary or checklist\n   file                  Uploads a file\n   finding               Uploads findings from JSON or TOML\n   note                  Uploads and lists notes\n   project               Work with projects\n   pushproject           Push data to project from JSON or TOML\n   template              Queries Finding Templates from SysReptor\n   translate             Translate Projects to other languages via Deepl\n\n  Tools:\n   nessus                Nessus vulnerability importer\n   nmap                  format nmap output\n   openvas               OpenVAS vulnerability importer\n   sslyze                format sslyze JSON output\n   zap                   Parses ZAP reports (JSON, XML)\n\n  Importers:\n   defectdojo            Imports DefectDojo finding templates\n   ghostwriter           Imports GhostWriter finding templates\n   importers             Show importers to use to import finding templates\n\n  Utils:\n   packarchive           Pack directories into a .tar.gz file\n   unpackarchive         Unpack .tar.gz exported archives\n\nconfiguration:\n  -s SERVER, --server SERVER\n  -t TOKEN, --token TOKEN\n                        SysReptor API token\n  -k, --insecure        do not verify server certificate\n  -p PROJECT_ID, --project-id PROJECT_ID\n                        SysReptor project ID\n  --private-note        add notes to private notes\n  -f, --force-unlock    force unlock notes\n</code></pre>"},{"location":"cli/setup/","title":"Prerequisites","text":"<ul> <li>Python 3.8-3.11</li> <li>pip3</li> </ul>"},{"location":"cli/setup/#installation","title":"Installation","text":""},{"location":"cli/setup/#from-pypi","title":"From pypi","text":"<p><code>pip3 install reptor</code></p>"},{"location":"cli/setup/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>translate (requires deepl)</li> <li>ghostwriter (requires gql)</li> <li>dev (requires pytest)</li> </ul> <p>Install by <code>pip3 install reptor[translate]</code>. Install all optional dependencies using <code>pip3 install reptor[all]</code></p>"},{"location":"cli/setup/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/Syslifters/reptor.git\ncd reptor\npip3 install .\n</code></pre> <p>Install optional dependencies by <code>pip3 install .[all]</code>.</p>"},{"location":"cli/customization/tools/","title":"Tools","text":"<p><code>raise NotImplementedError('Coming soon.')</code></p>"},{"location":"cli/importers/defectdojo/","title":"DefectDojo","text":"<p>Import finding templates from DefectDojo to SysReptor.</p>"},{"location":"cli/importers/defectdojo/#examples","title":"Examples","text":"<pre><code>reptor defectdojo --url http://localhost/\n</code></pre>"},{"location":"cli/importers/defectdojo/#configuration","title":"Configuration","text":"<p>This module needs additional configurations, which you can add to your config file by running:</p> <pre><code>$ reptor defectdojo --conf\nDefectDojo URL: https://localhost\nDefectDojo API key v2: your-api-key\n</code></pre>"},{"location":"cli/importers/defectdojo/#usage","title":"Usage","text":"<pre><code>usage: reptor defectdojo [-h] [--conf] [--tags TAGS] [--url [URL]]\n\nImports DefectDojo finding templates\n\noptional arguments:\n  -h, --help        show this help message and exit\n  --conf, --config  Configure plugin settings\n\nGlobal Importer Settings:\n  --tags TAGS       Comma-separated tags for new templates\n\n  --url [URL]       DefectDojo API\n</code></pre>"},{"location":"cli/importers/ghostwriter/","title":"Ghostwriter","text":"<p>Migrates finding templates from Ghostwriter to SysReptor.</p>"},{"location":"cli/importers/ghostwriter/#examples","title":"Examples","text":"<pre><code>reptor ghostwriter --url http://localhost/ghostwriter\n</code></pre>"},{"location":"cli/importers/ghostwriter/#installation","title":"Installation","text":"<p>Make sure you installed required dependencies by using <code>pip install reptor[ghostwriter]</code> or <code>pip install reptor[all]</code>.</p>"},{"location":"cli/importers/ghostwriter/#configuration","title":"Configuration","text":"<p>This module needs additional configurations, which you can add to your config file by running:</p> <pre><code>$ reptor ghostwriter --conf\nGhostwriter URL: https://localhost\nGhostwriter API key (x-hasura-admin-secret or JWT token): your-api-key\n</code></pre>"},{"location":"cli/importers/ghostwriter/#usage","title":"Usage","text":"<pre><code>usage: reptor ghostwriter [-h] [--conf] [--tags TAGS] [--url [URL]]\n\nImports GhostWriter finding templates\n\noptional arguments:\n  -h, --help        show this help message and exit\n  --conf, --config  Configure plugin settings\n\nGlobal Importer Settings:\n  --tags TAGS       Comma-separated tags for new templates\n\n  --url [URL]       Ghostwriter API\n</code></pre>"},{"location":"cli/projects-and-templates/createproject/","title":"CreateProject","text":"<p>Create a new pentest project via CLI.</p> <p>This module updates your reptor config with the newly created project ID, so you can immediately continue with other commands.  Use <code>--no-update-config</code> to prevent this behavior.</p>"},{"location":"cli/projects-and-templates/createproject/#examples","title":"Examples","text":"<pre><code>reptor createproject --name \"New project\" --design \"8a6ebd7b-637f-4f38-bfdd-3e8e9a24f64e\" --tags web,auto\nreptor createproject --name \"New project\" --design \"8a6ebd7b-637f-4f38-bfdd-3e8e9a24f64e\" --no-update-config\n</code></pre>"},{"location":"cli/projects-and-templates/createproject/#usage","title":"Usage","text":"<pre><code>usage: reptor createproject [-h] [--name PROJECT NAME] --design DESIGN ID\n                            [--tags TAGS] [--no-update-config]\n\nCreate a new pentest project\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --name PROJECT NAME, -n PROJECT NAME\n                        Project name\n  --design DESIGN ID, -d DESIGN ID\n                        Design UUID for the project\n  --tags TAGS, -t TAGS  Comma-separated project tags\n  --no-update-config    Do not update project ID in config file\n</code></pre>"},{"location":"cli/projects-and-templates/deletefindings/","title":"DeleteFindings","text":"<p>Delete findings from your project. Dry run is default: No findings are deleted unless you specify <code>--no-dry-run</code>.</p>"},{"location":"cli/projects-and-templates/deletefindings/#example","title":"Example","text":"<pre><code>reptor deletefindings --title-contains \"delete me\"  # Delete findings matching the search query\nreptor deletefindings --exclude-title-contains \"leave me\"  # Exclude findings with search query\nreptor deletefindings --no-dry-run  # Delete all findings, no dry run\n</code></pre>"},{"location":"cli/projects-and-templates/deletefindings/#usage","title":"Usage","text":"<pre><code>usage: reptor deletefindings [-h] [--title-contains SEARCHTERM]\n                             [--exclude-title-contains SEARCHTERM]\n                             [--no-dry-run]\n\nDeletes findings by title\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --title-contains SEARCHTERM\n                        Match string in title\n  --exclude-title-contains SEARCHTERM\n                        Matched strings in title are not deleted\n  --no-dry-run          Do delete findings, default is dry-run\n</code></pre>"},{"location":"cli/projects-and-templates/deleteprojects/","title":"DeleteProjects","text":"<p>Delete SysReptor projects. Dry run is default: No projects are deleted unless you specify <code>--no-dry-run</code>.</p>"},{"location":"cli/projects-and-templates/deleteprojects/#example","title":"Example","text":"<pre><code>reptor deleteprojects --title-contains \"delete me\"  # Delete projects matching the search query\nreptor deleteprojects --exclude-title-contains \"leave me\"  # Exclude projects with search query\nreptor deleteprojects --no-dry-run  # Delete all projects, no dry run\n</code></pre>"},{"location":"cli/projects-and-templates/deleteprojects/#usage","title":"Usage","text":"<pre><code>usage: reptor deleteprojects [-h] [--title-contains SEARCHTERM]\n                             [--exclude-title-contains SEARCHTERM]\n                             [--no-dry-run]\n\nDeletes projects by title\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --title-contains SEARCHTERM\n                        Match string in title\n  --exclude-title-contains SEARCHTERM\n                        Matched strings in title are not deleted\n  --no-dry-run          Do delete projects, default is dry-run\n</code></pre>"},{"location":"cli/projects-and-templates/exportfindings/","title":"ExportFindings","text":"<p>Export your project findings as a summary or checklist.</p> Export findings<pre><code>reptor exportfindings  # csv to stdout\nreptor exportfindings --format json --output \"findings.json\"  # json to file\nreptor exportfindings --format toml --fieldnames title,cvss  # export custom fieldnames\n</code></pre>"},{"location":"cli/projects-and-templates/exportfindings/#usage","title":"Usage","text":"<pre><code>usage: reptor exportfindings [-h] [--format {csv,json,toml,yaml}]\n                             [--fieldnames FIELDNAMES] [-o FILENAME]\n                             [--upload]\n\nExport your project findings as a summary or checklist\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --format {csv,json,toml,yaml}\n                        Output format\n  --fieldnames FIELDNAMES\n                        Fieldnames to be included, comma-separated\n  -o FILENAME, --output FILENAME\n                        Filename to store output, empty for stdout\n  --upload              Used with --export or --render; uploads file to note\n</code></pre>"},{"location":"cli/projects-and-templates/file/","title":"File","text":"<p><code>file</code> uploads files from your system into a SysReptor note.</p>"},{"location":"cli/projects-and-templates/file/#examples","title":"Examples","text":"Upload files from folder<pre><code>reptor file archive.zip\nreptor file *  # Upload all files\n</code></pre>"},{"location":"cli/projects-and-templates/file/#usage","title":"Usage","text":"<pre><code>usage: reptor file [-h] [-fn FILENAME] [file [file ...]]\n\nUploads a file\n\npositional arguments:\n  file                  files to upload; leave empty for stdin\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -fn FILENAME, --filename FILENAME\n                        filename if file provided via stdin\n</code></pre>"},{"location":"cli/projects-and-templates/finding/","title":"Finding","text":"<p>Create findings in your pentest report by JSON or TOML.</p>"},{"location":"cli/projects-and-templates/finding/#example","title":"Example","text":"<pre><code>cat finding.json | reptor finding\ncat finding.toml | reptor finding\n</code></pre>"},{"location":"cli/projects-and-templates/finding/#sample-finding","title":"Sample finding","text":"<p>Upload one finding by using the following structures. Use a list to upload multiple findings.</p> JSON finding structure<pre><code>{\n\"status\": \"in-progress\",\n\"data\": {\n\"cvss\": \"CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:N\",\n\"title\": \"Reflected XSS\",\n\"summary\": \"We detected a reflected XSS vulnerability.\",\n\"references\": [\n\"https://owasp.org/www-community/attacks/xss/\"\n],\n\"description\": \"The impact was heavy.\",\n\"recommendation\": \"HTML encode user-supplied inputs.\",\n\"affected_components\": [\n\"https://example.com/alert(1)\",\n\"https://example.com/q=alert(1)\"\n]\n}\n}\n</code></pre> TOML finding structure<pre><code>status = \"in-progress\"\n\n[data]\ncvss = \"CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:N\"\ntitle = \"Reflected XSS\"\nsummary = \"We detected a reflected XSS vulnerability.\"\nreferences = [ \"https://owasp.org/www-community/attacks/xss/\",]\ndescription = \"The impact was heavy.\"\nrecommendation = \"HTML encode user-supplied inputs.\"\naffected_components = [ \"https://example.com/alert(1)\", \"https://example.com/q=alert(1)\",]\n</code></pre>"},{"location":"cli/projects-and-templates/finding/#usage","title":"Usage","text":"<pre><code>usage: reptor finding [-h]\n\nUploads findings from JSON or TOML\n\noptional arguments:\n  -h, --help  show this help message and exit\n</code></pre>"},{"location":"cli/projects-and-templates/note/","title":"Note","text":"<p><code>note</code> creates a new note in SysReptor.</p>"},{"location":"cli/projects-and-templates/note/#examples","title":"Examples","text":"Upload notes<pre><code>echo \"*Upload me*\" | reptor note  # Appends to \"Uploads\" note\necho \"*Upload me*\" | reptor note --force  # Force unlock note\necho \"*Upload me*\" | reptor note --notetitle \"My Note\"  # Custom notetitle\n</code></pre>"},{"location":"cli/projects-and-templates/note/#usage","title":"Usage","text":"<pre><code>usage: reptor note [-h] [--list] [--json]\n\nUploads and lists notes\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --list      list available notes\n  --json\n</code></pre>"},{"location":"cli/projects-and-templates/project/","title":"Project","text":"<p>The project plugin lets you interact with your SysReptor projects.</p>"},{"location":"cli/projects-and-templates/project/#render-reports","title":"Render Reports","text":"<pre><code>reptor project --render  # Render report to PDF and download\nreptor project --render -o file.pdf  # Save to file.pdf\nreptor project --render -o -  # Write to stdout\nreptor project --render --upload  # Upload to notes\nreptor project --render --design 0222cdf1-4208-491c-8a23-7d49d67707ff  # Render with alternative design\n</code></pre> <p>You can add the design ID of your alternative design to your <code>~/.sysreptor/config.yaml</code>:</p> <pre><code>project:\ndesign: 0222cdf1-4208-491c-8a23-7d49d67707ff\n</code></pre>"},{"location":"cli/projects-and-templates/project/#export-reports","title":"Export Reports","text":"Export reports<pre><code>reptor project --export tar.gz  # Export your report to tar.gz\nreptor project --export tar.gz -o -  # Export your report to tar.gz, write to stdout\nreptor project --export json\nreptor project --export toml -o -  # Write report as toml to stdout\nreptor project --export yaml --upload  # Export report as yaml and upload to notes\n</code></pre>"},{"location":"cli/projects-and-templates/project/#usage","title":"Usage","text":"<pre><code>usage: reptor project [-h]\n                      [--search SEARCHTERM | --export {tar.gz,json,toml,yaml} | --render | --duplicate]\n                      [-o FILENAME] [--design DESIGN ID] [--upload] [--json]\n\nWork with projects\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --search SEARCHTERM   Search for term\n  --export {tar.gz,json,toml,yaml}\n                        Export project\n  --render              Render project\n  --duplicate           Duplicate project\n  -o FILENAME, --output FILENAME\n                        Filename for output\n  --design DESIGN ID    Render project with alternative design\n  --upload              Used with --export or --render; uploads file to note\n  --json                Used with --search; output as json\n</code></pre>"},{"location":"cli/projects-and-templates/pushproject/","title":"PushProject","text":"<p>Push project data (section and finding data) to your pentest report by JSON or TOML.</p>"},{"location":"cli/projects-and-templates/pushproject/#example","title":"Example","text":"<pre><code>cat project.json | reptor pushproject\ncat project.toml | reptor pushproject\n</code></pre> <p>If to push your data to a new report, create a project beforehand.</p> <pre><code>reptor createproject --name \"New project\" --design \"8a6ebd7b-637f-4f38-bfdd-3e8e9a24f64e\"\ncat project.json | reptor pushproject\n</code></pre>"},{"location":"cli/projects-and-templates/pushproject/#sample-project","title":"Sample project","text":"<p>Upload project data by using the following structures. You can add data to your report sections and create findings.</p> Project structure in JSON<pre><code>{\n\"report_data\": {\n\"title\": \"Report title\",\n\"customer_name\": \"GotBreached Ltd.\",\n\"receiver_name\": \"Maxima Doe\",\n\"executive_summary\": \"This is the Executive Summary\\n\",\n\"report_date\": \"2022-04-25\",\n\"list_of_changes\": [\n{\n\"description\": \"Draft\",\n\"date\": \"2022-04-22\",\n\"version\": \"0.1\"\n},\n{\n\"description\": \"Final Report\",\n\"date\": \"2022-04-25\",\n\"version\": \"1.0\"\n}\n]\n},\n\"findings\": [\n{\n\"status\": \"in-progress\",\n\"data\": {\n\"title\": \"Session management weaknesses\",\n\"cvss\": \"CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N\",\n\"summary\": \"My Summary\",\n\"affected_components\": [\n\"example.com\"\n]\n}\n},\n{\n\"status\": \"finished\",\n\"data\": {\n\"title\": \"Untrusted TLS certificates\",\n\"cvss\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N\",\n\"summary\": \"Summary\",\n\"recommendation\": \"\",\n\"affected_components\": [\n\"example.com\"\n]\n}\n}\n]\n}\n</code></pre> Project structure in TOML<pre><code>[report_data]\ntitle = \"Report title\"\ncustomer_name = \"GotBreached Ltd.\"\nreceiver_name = \"Maxima Doe\"\nexecutive_summary = \"\"\"\nThis is the Executive Summary\n\"\"\"\nreport_date = \"2024-04-25\"\n\n[[report_data.list_of_changes]]\ndescription = \"Draft\"\ndate = \"2024-04-22\"\nversion = \"0.1\"\n\n[[report_data.list_of_changes]]\ndescription = \"Final Report\"\ndate = \"2024-04-25\"\nversion = \"1.0\"\n\n[[findings]]\nstatus = \"in-progress\"\n\n[findings.data]\ntitle = \"Session management weaknesses\"\ncvss = \"CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N\"\nsummary = \"My Summary\"\naffected_components = [\n\"example.com\",\n]\n\n[[findings]]\nstatus = \"finished\"\n[findings.data]\ntitle = \"Untrusted TLS certificates\"\ncvss = \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N\"\nsummary = \"Summary\"\nrecommendation = \"\"\naffected_components = [\n\"example.com\",\n]\n</code></pre>"},{"location":"cli/projects-and-templates/pushproject/#usage","title":"Usage","text":"<pre><code>usage: reptor pushproject [-h] [projectdata]\n\nPush data to project from JSON or TOML\n\npositional arguments:\n  projectdata\n\noptional arguments:\n  -h, --help   show this help message and exit\n</code></pre>"},{"location":"cli/projects-and-templates/template/","title":"Template","text":"<p>Upload and query Finding Templates from SysReptor</p>"},{"location":"cli/projects-and-templates/template/#upload-finding-templates","title":"Upload finding templates","text":"<pre><code>cat template.json | reptor template\ncat template.toml | reptor template\n</code></pre>"},{"location":"cli/projects-and-templates/template/#sample-finding-template","title":"Sample finding template","text":"<p>Upload one finding template by using the following structures. Use a list to upload multiple finding templates.</p> JSON finding template structure<pre><code>{\n\"tags\": [\n\"web\"\n],\n\"translations\": [\n{\n\"language\": \"en-US\",\n\"is_main\": true,\n\"status\": \"finished\",\n\"data\": {\n\"title\": \"My Title\",\n\"description\": \"My Description\"\n}\n}\n]\n}\n</code></pre> TOML finding template structure<pre><code>tags = [\n\"web\",\n]\n\n[[translations]]\nis_main = true\nlanguage = \"en-US\"\nstatus = \"finished\"\n\n[translations.data]\ntitle = \"My title\"\ndescription = \"My description\"\n</code></pre>"},{"location":"cli/projects-and-templates/template/#read-finding-templates","title":"Read finding templates","text":"<pre><code>reptor template --list  # template overview\nreptor template --search SQL  # template overview, search for keywords\nreptor template --search SQL --export plain  # print templates for copy&amp;paste\nreptor template --search SQL --export plain --language en  # filter for language\nreptor template --export json  # export templates as json\nreptor template --search SQL --export json  # search for keyword\nreptor template --export tar.gz  # export all templates as tar.gz (importable via SysReptor web interface)\n</code></pre>"},{"location":"cli/projects-and-templates/template/#usage","title":"Usage","text":"<pre><code>usage: reptor template [-h] [--list] [--search SEARCH] [--language LANGUAGE]\n                       [--export {tar.gz,json,yaml,plain}] [-o FILENAME]\n\nQueries Finding Templates from SysReptor\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o FILENAME, --output FILENAME\n                        Filename for output\n\n  --list                List all finding templates\n  --search SEARCH       Search for term\n  --language LANGUAGE   Template language for export format \"plain\", e.g. \"en\"\n  --export {tar.gz,json,yaml,plain}\n                        Export templates\n</code></pre>"},{"location":"cli/projects-and-templates/translate/","title":"Translate","text":"<p>Translate pentest reports using Deepl (bring your own Deepl API token).</p>"},{"location":"cli/projects-and-templates/translate/#examples","title":"Examples","text":"<pre><code>reptor translate -to DE --dry-run\nreptor translate --from EN -to DE\nreptor translate -to DE --skip-fields recommendation,summary\n</code></pre>"},{"location":"cli/projects-and-templates/translate/#installation","title":"Installation","text":"<p>Make sure you installed required dependencies by using <code>pip install reptor[translate]</code> or <code>pip install reptor[all]</code>.</p>"},{"location":"cli/projects-and-templates/translate/#configuration","title":"Configuration","text":"<p>The translate module needs additional configurations, which you can add to <code>~/.sysreptor/config.yaml</code>:</p> <pre><code>translate:\n  deepl_api_token: &lt;your-api-token&gt;\n  skip_fields:\n  - description\n</code></pre> <p><code>skip_fields</code> can be used to do not translate certain report or finding fields.</p>"},{"location":"cli/projects-and-templates/translate/#usage","title":"Usage","text":"<pre><code>usage: reptor translate [-h] [--conf] [--from LANGUAGE_CODE]\n                        [--to LANGUAGE_CODE] [--skip-fields FIELDS]\n                        [--dry-run]\n\nTranslate Projects to other languages via Deepl\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --conf, --config      Configure plugin settings\n  --from LANGUAGE_CODE  Language code of source language\n  --to LANGUAGE_CODE    Language code of dest language\n  --skip-fields FIELDS  Report and Finding fields, comma-separated\n  --dry-run             Do not translate, count characters to be translated and checks Deepl quota\n</code></pre>"},{"location":"cli/tools/nessus/","title":"Nessus","text":""},{"location":"cli/tools/nessus/#examples","title":"Examples","text":"Nessus<pre><code>cat nessus.xml | reptor nessus\ncat nessus.xml | reptor nessus --upload  # Upload findings as notes\ncat nessus.xml | reptor nessus --push-findings  # Create findings from scan results\n</code></pre> <p>Filter your Nessus results:</p> Nessus Filter<pre><code>cat nessus.xml | reptor nessus --filter-severity medium-critical --push-findings\ncat nessus.xml | reptor nessus --include-plugins 11219,25216 --push-findings  # Include only plugin IDs 11219, 25216\ncat nessus.xml | reptor nessus --exclude-plugins 11219,25216 --push-findings  # Exclude plugin IDs 11219, 25216\nreptor nessus -i nessus_1.xml nessus_2.xml --push-findings  # Use multiple input files\n</code></pre> <p>You can add those filter settings to your config by running:</p> Nessus conf<pre><code>reptor nessus --conf\n</code></pre>"},{"location":"cli/tools/nessus/#usage","title":"Usage","text":"<pre><code>usage: reptor nessus [-h] [--conf] [-i [INPUT [INPUT ...]]]\n                     [--format | --upload | --push-findings | --template-vars | --parse | --upload-finding-templates]\n                     [--severity-filter SEVERITY_FILTER]\n                     [--exclude EXCLUDED_PLUGINS] [--include INCLUDED_PLUGINS]\n\nNessus vulnerability importer\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --conf, --config      Configure plugin settings\n  -i [INPUT [INPUT ...]], --input [INPUT [INPUT ...]]\n                        Input file, if not stdin (multiple files allowed)\n  --format\n  --upload\n  --push-findings\n  --template-vars, --template-variables\n                        Print template variables (needed for finding template customization).\n  --parse\n  --upload-finding-templates\n                        Upload local finding templates to SysReptor\n  --severity-filter SEVERITY_FILTER\n                        Filter findings by severity comma-separated (\"high,medium\") or as range (\"medium-critical\")\n  --exclude EXCLUDED_PLUGINS\n                        Exclude plugin IDs, comma-separated\n  --include INCLUDED_PLUGINS\n                        Include plugin IDs, comma-separated; default: all are included\n</code></pre>"},{"location":"cli/tools/nmap/","title":"Nmap","text":""},{"location":"cli/tools/nmap/#examples","title":"Examples","text":"Nmap scan<pre><code>sudo -n nmap -Pn -n -sV -oX - -p 0-65535 $target | tee nmap-output.xml\n</code></pre> Format nmap output<pre><code>cat nmap-output.xml | reptor nmap -oX\n| Hostname | IP | Port | Service | Version |\n| ------- | ------- | ------- | ------- | ------- |\n| www.google.com | 142.250.180.228 | 80/tcp | http | gws |\n| www.google.com | 142.250.180.228 | 443/tcp | https | gws |\n| www.syslifters.com | 34.249.200.254 | 80/tcp | http | n/a |\n| www.syslifters.com | 34.249.200.254 | 443/tcp | https | n/a |\n</code></pre> <pre><code>cat nmap-output.xml | reptor nmap -oX --upload  # Upload table to notes\nreptor nmap -oX -i nmap_1.xml nmap_2.xml --upload  # Use multiple input files\n</code></pre>"},{"location":"cli/tools/nmap/#usage","title":"Usage","text":"<pre><code>usage: reptor nmap [-h] [-i [INPUT [INPUT ...]]]\n                   [--format | --upload | --parse] [--xml | -oX | -oG]\n\nformat nmap output\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT [INPUT ...]], --input [INPUT [INPUT ...]]\n                        Input file, if not stdin (multiple files allowed)\n  --format\n  --upload\n  --parse\n  --xml\n  -oX                   nmap XML output format, same as --xml (recommended)\n  -oG, --grepable       nmap Grepable output format\n</code></pre>"},{"location":"cli/tools/openvas/","title":"OpenVAS","text":""},{"location":"cli/tools/openvas/#examples","title":"Examples","text":"OpenVAS<pre><code>cat openvas.xml | reptor openvas\ncat openvas.xml | reptor openvas --upload  # Upload findings as notes\ncat openvas.xml | reptor openvas --push-findings  # Create findings from scan results\n</code></pre> <p>Filter your OpenVAS results:</p> OpenVAS Filter<pre><code>cat openvas.xml | reptor openvas --min-qod 50 --push-findings\ncat openvas.xml | reptor openvas --filter-severity medium-critical --push-findings\ncat openvas.xml | reptor openvas --include-plugins 1.3.6.1.4.1.25623.1.0.103674 --push-findings\ncat openvas.xml | reptor openvas --exclude-plugins 1.3.6.1.4.1.25623.1.0.103674 --push-findings\nreptor openvas -i openvas_1.xml openvas_2.xml --push-findings  # Use multiple input files\n</code></pre> <p>You can add those filter settings to your config by running:</p> OpenVAS conf<pre><code>reptor openvas --conf\n</code></pre>"},{"location":"cli/tools/openvas/#usage","title":"Usage","text":"<pre><code>usage: reptor openvas [-h] [--conf] [-i [INPUT [INPUT ...]]]\n                      [--format | --upload | --push-findings | --template-vars | --parse | --upload-finding-templates]\n                      [--severity-filter SEVERITY_FILTER] [--min-qod MIN_QOD]\n                      [--exclude EXCLUDED_PLUGINS]\n                      [--include INCLUDED_PLUGINS]\n\nOpenVAS vulnerability importer\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --conf, --config      Configure plugin settings\n  -i [INPUT [INPUT ...]], --input [INPUT [INPUT ...]]\n                        Input file, if not stdin (multiple files allowed)\n  --format\n  --upload\n  --push-findings\n  --template-vars, --template-variables\n                        Print template variables (needed for finding template customization).\n  --parse\n  --upload-finding-templates\n                        Upload local finding templates to SysReptor\n  --severity-filter SEVERITY_FILTER\n                        Filter findings by severity comma-separated (\"high,medium\") or as range (\"medium-critical\")\n  --min-qod MIN_QOD     Minimum OpenVAS Quality of Detection (QoD) to include (0-100)\n  --exclude EXCLUDED_PLUGINS\n                        Exclude plugin IDs, comma-separated\n  --include INCLUDED_PLUGINS\n                        Include plugin IDs, comma-separated; default: all are included\n</code></pre>"},{"location":"cli/tools/openvas/#openvas-xml-export","title":"OpenVAS XML export","text":"<p>You can use the following filter to export all findings. <pre><code>apply_overrides=0 min_qod=0 first=1 sort-reverse=severity rows=1000\n</code></pre></p> <p>If you want to export (more than 1.000) rows, set <code>ignore_pagination=\"1\"</code>.  One way to do this is to run the following commands as an unprivileged user.</p> Export findings as XML<pre><code>user=\"your OpenVAS username\"\nreport_id=\"your report id\"\ngvm-cli --gmp-username \"$user\" socket --xml \"&lt;get_reports report_id=\\\"$report_id\\\" ignore_pagination=\\\"1\\\" details=\\\"1\\\" /&gt;\"\n</code></pre>"},{"location":"cli/tools/sslyze/","title":"SSLyze","text":""},{"location":"cli/tools/sslyze/#examples","title":"Examples","text":"SSLyze scan<pre><code>target=example.com:443\nsslyze --sslv2 --sslv3 --tlsv1 --tlsv1_1 --tlsv1_2 --tlsv1_3 --certinfo --reneg --compression --heartbleed --openssl_ccs --fallback --robot \"$target\" --json_out=- | tee sslyze.json\n</code></pre> SSLyze<pre><code>cat sslyze.json | reptor sslyze  # Format\ncat sslyze.json | reptor sslyze --upload  # Format and upload as note\ncat sslyze.json | reptor sslyze --push-findings  # Create findings from scan results\nreptor sslyze -i sslyze_1.json sslyze_2.json --push-findings  # Use multiple input files\n</code></pre>"},{"location":"cli/tools/sslyze/#usage","title":"Usage","text":"<pre><code>usage: reptor sslyze [-h] [-i [INPUT [INPUT ...]]]\n                     [--format | --upload | --push-findings | --template-vars | --parse | --upload-finding-templates]\n\nformat sslyze JSON output\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT [INPUT ...]], --input [INPUT [INPUT ...]]\n                        Input file, if not stdin (multiple files allowed)\n  --format\n  --upload\n  --push-findings\n  --template-vars, --template-variables\n                        Print template variables (needed for finding template customization).\n  --parse\n  --upload-finding-templates\n                        Upload local finding templates to SysReptor\n</code></pre>"},{"location":"cli/tools/zap/","title":"ZAP","text":""},{"location":"cli/tools/zap/#usage","title":"Usage","text":"<pre><code>usage: reptor zap [-h] [-i [INPUT]] [--format | --upload | --parse]\n                  [--xml | --json]\n\nParses ZAP reports (JSON, XML)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input file, if not stdin \n  --format\n  --upload\n  --parse\n  --xml\n  --json\n</code></pre>"},{"location":"cli/utils/packarchive/","title":"Packarchive","text":"<p><code>packarchive</code> packs unpacked toml and json data structures back to tar.gz archives. Use <code>unpackarchive</code> to unpack tar.gz archives (like exported projects, designs, finding templates).</p>"},{"location":"cli/utils/packarchive/#examples","title":"Examples","text":"Pack archive<pre><code>reptor packarchive --output project.tar.gz ./project  # Pack contents of \"project\" directory to project.tar.gz\n</code></pre>"},{"location":"cli/utils/packarchive/#usage","title":"Usage","text":"<pre><code>usage: reptor packarchive [-h] [-o OUTPUT] directories [directories ...]\n\nPack directories into a .tar.gz file\n\npositional arguments:\n  directories\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n</code></pre>"},{"location":"cli/utils/unpackarchive/","title":"Unpackarchive","text":"<p><code>unpackarchive</code> unpacks exported tar.gz archives (like exported projects, designs, finding templates) to json or toml structures. Use <code>packarchive</code> to convert back to tar.gz.</p>"},{"location":"cli/utils/unpackarchive/#examples","title":"Examples","text":"Unpack archive<pre><code>reptor unpackarchive --format json --output project ./project.tar.gz  # Unpack project archive as json to \"project\" directory\nreptor unpackarchive --format toml --output design ./design.tar.gz  # Unpack design archive as toml to \"design\" directory\n</code></pre>"},{"location":"cli/utils/unpackarchive/#usage","title":"Usage","text":"<pre><code>usage: reptor unpackarchive [-h] [-o OUTPUT] [-f {json,toml}]\n                            files [files ...]\n\nUnpack .tar.gz exported archives\n\npositional arguments:\n  files\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n  -f {json,toml}, --format {json,toml}\n</code></pre>"},{"location":"cli/writing-plugins/importers/","title":"How to write an importer","text":"<p>Importers currently support the import of finding templates from other tools. (In the future it might also support the import of projects.)</p>"},{"location":"cli/writing-plugins/importers/#copy-an-existing-importer","title":"Copy an existing importer","text":"<p>You can copy, for example, the Ghostwriter plugin to <code>.sysreptor/plugins</code> in your home directory.</p> <p>Rename the <code>Ghostwriter</code> directory and <code>Ghostwriter.py</code> to the desired name. Also update the <code>loader</code> variable at the bottom to your new class in your <code>.py</code> file.</p> <p>You will be able to call your plugin via <code>reptor &lt;plugin name in lowercase&gt;</code>.</p> <p>In the future, we might provide an empty boilerplate for easier importer creation.</p>"},{"location":"cli/writing-plugins/importers/#importer-settings","title":"Importer settings","text":"<p>You will probably have to use some settings in your plugin, like from what URL the data should be fetched, or an API key. There are two options how to provide those settings:</p> <ul> <li>CLI parameter</li> <li>config.yaml</li> </ul>"},{"location":"cli/writing-plugins/importers/#settings-via-cli-parameter","title":"Settings via CLI parameter","text":"<p>Use the <code>add_arguments</code> method to add your custom CLI arguments</p> <pre><code>    @classmethod\n    def add_arguments(cls, parser, plugin_filepath=None):\n        super().add_arguments(parser, plugin_filepath=plugin_filepath)\n        action_group = parser.add_argument_group()\n        action_group.add_argument(\n            \"--url\",\n            metavar=\"URL\",\n            action=\"store\",\n            const=\"\",\n            nargs=\"?\",\n            help=\"API Url\",\n        )\n</code></pre> <p>You can use <code>--help</code> to check if your arguments are available: <code>reptor &lt;your plugin name&gt; --help</code>.</p> <p>Access your arguments via the <code>kwargs</code> dictionary in <code>__init__.py</code>, e. g. <code>self.url = kwargs.get(\"url\", \"\")</code></p>"},{"location":"cli/writing-plugins/importers/#settings-via-configyaml","title":"Settings via config.yaml","text":"<p>reptor settings are managed in <code>.sysreptor/config.yaml</code> in your home directory. You can add plugin specific settings there, e. g.:</p> <pre><code>project_id: 42c2f73a-4383-4ec2-a3fa-281598edb0e8\nserver: https://demo.sysre.pt\ntoken: sysreptor_TOKEN\n\nyour_plugin:\napikey: your_api_key\nurl: http://localhost:8080\n</code></pre> <p>Those settings are attributes of <code>self</code> in your plugin. If those settings are mandatory, you can raise an exception if they are not present, e. g.:</p> <pre><code>def __init__(self, **kwargs) -&gt; None:\n    super().__init__(**kwargs)\n\n    if not hasattr(self, \"apikey\"):\n        raise ValueError(\n            \"API Key is required. Add to your user config.\"\n        )\n</code></pre>"},{"location":"cli/writing-plugins/importers/#fetch-finding-templates-from-source","title":"Fetch finding templates from source","text":"<p>It's time to get findings from your source. Use the <code>next_findings_batch</code> method to yield finding template by finding template, e. g.:</p> <pre><code>def next_findings_batch(self):\n    findings = self._get_findings_from_source()\n    for finding_data in findings:\n        yield {\n            \"language\": \"en-US\",\n            \"status\": \"in-progress\",\n            \"data\": finding_data,\n        }\n</code></pre> <p>Note that you have to implement <code>_get_findings_from_source</code> yourself. This is where you access your source's API.</p> <p><code>finding_data</code> is a dictionary containing the fields of your source. The full data structure might look like:</p> <p><pre><code>{\n\"language\": \"en-US\",\n\"status\": \"in-progress\",\n\"data\": {\n\"title\": \"Finding Title\",\n\"description\": \"Finding Description\",\n\"links\": \"https://example.com/\\nhttps://example.com/reference\"\n},\n}\n</code></pre> The field names should be those from your source, not from SysReptor.</p> <p>If your source supports translations, you can yield a list containing this data structure, e. g. <pre><code>[\n{\n\"language\": \"en-US\",\n\"status\": \"in-progress\",\n\"data\": {\n\"title\": \"Finding Title\",\n\"description\": \"Finding Description\",\n\"links\": \"https://example.com/\\nhttps://example.com/reference\"\n},\n}\n]\n</code></pre></p>"},{"location":"cli/writing-plugins/importers/#mapping-field-names","title":"Mapping field names","text":"<p>Define a <code>mapping</code> attribute in your class to map the field names of your source to the SysReptor fields, e. g.:</p> <pre><code>{\n\"title\": \"title\",\n\"description\": \"description\",\n\"links\": \"references\"\n}\n</code></pre> <p>In this example, the source field <code>title</code> maps to the SysReptor field <code>title</code>. However, the source field <code>links</code> should be mapped to the field <code>references</code>.</p> <p>We encourage you to map to predefined SysReptor fields only. This guarantees compatibility with all SysReptor installations and designs.</p>"},{"location":"cli/writing-plugins/importers/#processing-values","title":"Processing values","text":"<p>In the example above, the <code>links</code> field containes a newline-separated field of links. However, <code>references</code> in SysReptor is a list. To process and/or convert values, you can define a method called <code>convert_&lt;source field name&gt;</code>. This will be called to preprocess the values of the fields.</p> <pre><code>    def convert_links(self, value):\n        return value.splitlines()\n</code></pre>"},{"location":"cli/writing-plugins/importers/#run-and-enjoy","title":"Run and enjoy","text":"<p>You can now run your newly created importer by <code>reptor &lt;your tool name&gt;</code>. Use the <code>--tags</code> switch to add tags to imported template to be able to search for the imported templates later.</p>"},{"location":"cli/writing-plugins/tools/","title":"How to write a tool plugin","text":""},{"location":"cli/writing-plugins/tools/#what-a-plugin-does","title":"What a plugin does","text":"<p>A plugin can...</p> <ul> <li>read tool outputs via stdin</li> <li>parse them</li> <li>format them</li> <li>upload as notes, or</li> <li>create findings</li> </ul>"},{"location":"cli/writing-plugins/tools/#where-plugins-are-located","title":"Where plugins are located","text":"<p>reptor comes with a number of plugins. However, you can override any plugin by copying it to the <code>.sysreptor/plugins</code> folder in your home directory.</p> <p>You can do this by running <code>reptor plugins --copy &lt;module name&gt; --full</code></p> <p>If you copy the entire plugin, it overrides the builtin plugins from reptor. If you want to override templates only, use <code>reptor plugins --copy &lt;module name&gt;</code>. So you can customize the templates used for formatting the data, while preserving the official functionality of the plugin.</p>"},{"location":"cli/writing-plugins/tools/#create-a-new-plugin","title":"Create a new plugin","text":"<p>Let's say we want to build a plugin for a fictional XSS-tool. We can start off using our plugin boilerplate by running <code>reptor plugins --new XssTool</code>.</p> <p>This will add the file structure to <code>.sysreptor/plugins/XssTool</code>. This directory is already dynamically included by reptor. When you run <code>reptor --help</code>, you should see <code>xsstool</code> under the section <code>Tools</code>. You can also call the help message of your plugin by <code>reptor xsstool --help</code>.</p>"},{"location":"cli/writing-plugins/tools/#implement-a-parser","title":"Implement a parser","text":"<p>Our XssTool has two output options:</p> <ul> <li>Plaintext</li> <li>JSON</li> </ul> <p>Our plugin already implements some parsing methods and the corresponding arguments:</p> <ul> <li><code>parse_json</code> (<code>--json</code>)</li> <li><code>parse_xml</code> (<code>--xml</code>)</li> <li><code>parse_csv</code> (<code>--csv</code>)</li> </ul> <p>As we do not need xml and csv parsing, we can remove the methods. This will also make them disappear in the help message. The <code>parse_json</code> method will be called if the CLI switch <code>--json</code> is provided.  </p> <p>However, we are missing an option to parse plaintext outputs. An example plaintext output would be:</p> <pre><code>https://example.com/alert(1)\nhttps://example.com/q=alert(1)\n</code></pre> <p>Our parsing method should split the lines and store the result into a list:</p> <pre><code>def parse_plaintext(self):\n    self.parsed_input = self.raw_input.splitlines()\n</code></pre> <p>This function must also be called. We can override the parent's <code>parse</code> method for this. Calling the parent method makes sure that json parsing is executed.</p> <pre><code>def parse(self):\n    super().parse()\n    if self.input_format == \"plaintext\":\n        self.parse_plaintext()\n</code></pre> <p>We still need to add a commandline option for plaintext parsing. This can be done in the <code>add_arguments</code> method. In the course of this, let's delete the <code>--foo</code> and <code>--bar</code> commandline options of the boilerplate. We don't need them. (Make sure to leave the <code>super().add_arguments()</code> call.)</p> <p>Input formats are mutually exclusive. We want our plaintext parsing switch also to be mutually exclusive. Therefore, we get the mutually exclusive parsing group and add a <code>--plaintext</code> switch:</p> <pre><code>@classmethod\ndef add_arguments(cls, parser, plugin_filepath=None):\n    super().add_arguments(parser, plugin_filepath=plugin_filepath)\n    input_format_group = cls.get_input_format_group(parser)\n    input_format_group.add_argument(\n        \"--plaintext\",\n        help=\"plaintext output format\",\n        action=\"store_const\",\n        dest=\"format\",\n        const=\"plaintext\",\n    )\n</code></pre> <p>The default <code>input_format</code> is <code>raw</code>. Specify the default <code>input_format</code> in the <code>__init__</code> method:</p> <pre><code>if self.input_format == \"raw\":\n    self.input_format = \"plaintext\"\n</code></pre> <p>We are now done with implementing our parser. We can test it using:</p> <pre><code>printf \"https://example.com/alert(1)\\nhttps://example.com/q=alert(1)\" | reptor xsstool --parse      ['https://example.com/alert(1)', 'https://example.com/q=alert(1)']\n</code></pre>"},{"location":"cli/writing-plugins/tools/#formatting-tool-output","title":"Formatting tool output","text":"<p>Now we want to bring our data into a beautiful and human-readable format. SysReptor uses markdown and allows HTML syntax there.</p> <p>reptor uses the Django template language with a slightly different syntax for formatting.  </p> <p>The Django start tags are prepended with the HTML comment start tag and become:</p> <ul> <li><code>{{</code> becomes <code>&lt;!--{{</code></li> <li><code>{%</code> becomes <code>&lt;!--{%</code></li> <li><code>{#</code> becomes <code>&lt;!--{#</code></li> </ul> <p>An HTML comment end tag is appended to the Django end tags:</p> <ul> <li><code>}}</code> becomes <code>}}--&gt;</code></li> <li><code>%}</code> becomes <code>%}--&gt;</code></li> <li><code>#}</code> becomes <code>#}--&gt;</code></li> </ul> <p>(Find the reason for this later in this tutorial.)</p> <p>Let's bring the list of our XSS outputs into the format of a markdown table. We find an empty template at <code>templates/mytemplate.md</code>. We rename it to <code>xss-table.md</code> and place the following template inside:</p> <pre><code>| XSS target |\n| ------- |\n&lt;!--{% for xss_target in data %}--&gt;\n| &lt;!--{{xss_target}}--&gt; |\n&lt;!--{% endfor %}--&gt;\n</code></pre> <p>However, we have never defined the <code>data</code> variable. This was automatically done in the <code>preprocess_for_template</code> method: </p> <pre><code>def preprocess_for_template(self):\n    return {\"data\": self.parsed_input}\n</code></pre> <p>This method is like a second parsing step for preparing the parsed data for usage in a template. You can add entries to the dictionary for easier template processing.</p> <p>We can now try to format our output:</p> <pre><code>printf \"https://example.com/alert(1)\\nhttps://example.com/q=alert(1)\" | reptor xsstool --format | XSS target |\n| ------- |\n\n| https://example.com/alert(1) |\n\n| https://example.com/q=alert(1) |\n</code></pre> <p>This gives us bad newlines within the table because the Django template engine leaves the newlines from the <code>for</code> loop there. We can resolve this by using the <code>noemptylines</code> tag:</p> <pre><code>&lt;!--{% load md %}--&gt;&lt;!--{% noemptylines %}--&gt;\n| XSS target |\n| ------- |\n&lt;!--{% for xss_target in data %}--&gt;\n| &lt;!--{{xss_target}}--&gt; |\n&lt;!--{% endfor %}--&gt;\n&lt;!--{% endnoemptylines %}--&gt;\n</code></pre>"},{"location":"cli/writing-plugins/tools/#uploading-to-notes","title":"Uploading to notes","text":"<p>If you haven't done this yet, you can now add the configuration of your SysReptor installation. Create an API token at <code>https://yourinstallation.local/users/self/apitokens/</code> and run <code>reptor conf</code> to add all necessary information.</p> <p>Let's upload our formatted data to the project notes:</p> <pre><code>printf \"https://example.com/alert(1)\\nhttps://example.com/q=alert(1)\" | reptor xsstool --upload\nSuccessfully uploaded to notes.\n</code></pre> <p>If you experience any problems during upload, check if the user has permission for the project ID from your configuration. Use the <code>--debug</code> switch for further troubleshooting.</p> <p>Your formatted output is now uploaded to your project notes:</p> <p></p> <p>Use <code>--notetitle \"My Notename\"</code> for a different title and <code>--private-note</code> to add it to your private notes.  </p> <p>You can also update the default note title and replace your note icon in the <code>__init__</code> method:</p> <pre><code>self.notetitle = kwargs.get(\"notetitle\") or \"XSS Tool\"\nself.note_icon = \"\ud83d\udd25\"\n</code></pre>"},{"location":"cli/writing-plugins/tools/#more-complex-note-structures","title":"More complex note structures","text":"<p>We can also create more complex note structures, like one note per target:</p> <p></p> <p>Therefore, we implement the <code>create_notes</code> method. In the first step, we group the data by URL, which should result in the following JSON structure:</p> <pre><code>{\n\"https://example.com/alert(1)\": [\n\"https://example.com/alert(1)\"\n],\n\"https://example.com/q=alert(1)\": [\n\"https://example.com/q=alert(1)\"\n]\n}\n</code></pre> <p>We can do this by implementing:</p> <pre><code>def create_notes(self):\n    data = {t: [t] for t in self.parsed_input}\n</code></pre> <p>We then use the <code>NoteTemplate</code> model for creating our note stucture. Import the model using:</p> <pre><code>from reptor.models.Note import NoteTemplate\n</code></pre> <p>Our main parent note is a note called <code>xsstool</code>. It is created by:</p> <pre><code>main_note = NoteTemplate()\nmain_note.title = self.notetitle\nmain_note.icon_emoji = self.note_icon\nmain_note.parent_notetitle = \"Uploads\"  # Put note below \"Uploads\"\n</code></pre> <p>We then iterate through our URLs, create one note per URL and append it as a child of our parent note. Finally, we return the parent note.</p> <pre><code>for url, target_list in data.items():\n    ip_note = NoteTemplate()\n    ip_note.title = url\n    ip_note.checked = False  # Make note an unticked checkbox instead of emoji\n    ip_note.template = \"mytemplate\"  # Format note using our Django template\n    ip_note.template_data = {\"data\": target_list}  # Provide data for template\n    main_note.children.append(ip_note)  # Append as child of parent note\nreturn main_note  # Return parent note\n</code></pre> <p>We can now upload one note per target as seen in the screenshot above:</p> <pre><code>printf \"https://example.com/alert(1)\\nhttps://example.com/q=alert(1)\" | reptor xsstool --upload\nSuccessfully uploaded to notes.\n</code></pre>"},{"location":"cli/writing-plugins/tools/#create-findings","title":"Create findings","text":"<p>Creating notes is nice but... We want to automate our report.</p> <p>The first thing we need to define is a name for your finding and a condition when the finding should be triggered.</p> <p>We call our finding <code>xss</code>. This means, we need to implement a method called <code>finding_xss</code>. This method should return data that can be used by Django templates. It many cases, the data might equal the return value of <code>preprocess_for_template</code>. The method should return <code>None</code> if no issue should be triggered.</p> <p>In our case, we want to trigger an issue if the list in parsed input is not empty. Let's implement this method:</p> <pre><code>def finding_xss(self):\n    if len(self.parsed_input) &gt; 0:\n        return self.preprocess_for_template()\n    return None\n</code></pre> <p>As soon as you have defined a <code>finding_*</code> method, you should have an option in your plugin's help message: <code>--push-findings</code>.</p> <p>Now we have to define, what the contents of the findings should be. Find a sample finding in the <code>findings</code> directory. Rename this file to <code>xss.toml</code> to match it our vulnerability name.</p> <p>The findings definitions are in TOML format. Adapt the contents of the file, as needed, e. g.:</p> <pre><code>[data]\ntitle = \"Reflected Cross-Site Scripting (XSS)\"\ncvss = \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N\"\n\nsummary = \"\"\"\nWe detected a reflected XSS vulnerability.\n\n&lt;!--{% include \"xss-table.md\" %}--&gt;\n\"\"\"\n\nrecommendation = \"HTML encode user-supplied inputs.\"\nreferences = [\n\"https://owasp.org/www-community/attacks/xss/\",\n]\n</code></pre> <p>You can use the adapted Django template language in the fields in the TOML structure. Note that you can now include templates that we defined earlier as <code>xss-table.md</code>.  </p> <p>We can use our new switch <code>--push-findings</code> and create a new finding in our SysReptor report:</p> <pre><code>printf \"https://example.com/alert(1)\\nhttps://example.com/q=alert(1)\" | reptor xsstool --push-findings\nPushed finding \"Reflected Cross-Site Scripting (XSS)\"\n</code></pre> <p>It was pushed to the SysReptor server and can be found in the project from the configuration:</p> <p></p> <p>Note that no affected components were added to the finding. We can add the field <code>affected_components</code> as a list to the dictionary returned by our <code>finding_xss</code> method to be filled out:</p> <pre><code>def finding_xss(self):\n    if len(self.parsed_input) &gt; 0:\n        result = self.preprocess_for_template()\n        result[\"affected_components\"] = self.parsed_input\n        return result\n    return None\n</code></pre> <p>If you now push the finding again, it will not work because a finding with the same title already exists. Delete or rename the first finding, push again and the affected components will also be present in your finding.</p>"},{"location":"cli/writing-plugins/tools/#create-findings-from-sysreptor-templates","title":"Create findings from SysReptor templates","text":"<p>We just created a finding from a TOML file. However, if you maintain your finding templates in SysReptor, you might want to create your findings from your centrally managed library.  </p> <p>That's easier done than said: Add a tag to your finding template in the format <code>&lt;plugin name&gt;:&lt;finding name&gt;</code>.  In our case this is <code>xsstool:xss</code>.</p> <p></p> <p>We can use the string and markdown fields to insert our Django templates:</p> <p></p> <p>The Django templates are now HTML comments. If you manually use your finding templates, the Django templates will not be rendered into your report. This is the reason the modified the Django tags.</p> <p>Templates from the SysReptor template library are preferred over TOML-templates.</p> <p>You can now generate your finding from your template library:</p> <pre><code>printf \"https://example.com/alert(1)\\nhttps://example.com/q=alert(1)\" | reptor xsstool --push-findings\nPushed finding \"Reflected Cross-Site Scripting (XSS)\"\n</code></pre> <p>The finding was created successfully. You see from the \"T\" at the top that the finding was created from a template.</p> <p></p> <p>If you now re-run the command, reptor will refuse to push the finding again. This is because the report holds a finding that was created from the same finding template.</p>"},{"location":"cli/writing-plugins/tools/#source-code","title":"Source Code","text":"<p>Download the full source code of this plugin.</p>"},{"location":"designer/charts/","title":"Charts","text":"<p>Charts can be embedded into reports with a <code>&lt;chart&gt;</code> component. The <code>&lt;chart&gt;</code> component uses ChartJS for rendering charts. The resulting chart is embedded as an image in the PDF.</p> <p>How the chart looks like is specified by the <code>:config</code> argument. This argument accepts a ChartJS config object. You can configure different chart types (e.g. pie chart, bar chart, line chart, etc.), chart styling, labels. The <code>config</code> also takes the datasets to be rendered in the <code>data</code> property.</p> <p>You can use all available ChartJS configuration options (except animations, since they are not possible in PDFs) to customize charts for your needs.</p> <p>Other options:</p> <ul> <li><code>width</code>: Width of the chart in centimeter</li> <li><code>height</code>: Height of the chart in centimeter</li> </ul>"},{"location":"designer/charts/#example-bar-chart-of-vulnerability-risks","title":"Example: Bar Chart of vulnerability risks","text":"<p>The following chart shows the number of vulnerabilities for each risk level (none, low, medium, high, critical) in a bar chart. Each risk level bar has a different color.</p> <p></p> <pre><code>&lt;figure&gt;\n  &lt;chart :width=\"15\" :height=\"10\" :config=\"{\n    type: 'bar', \n    data: {\n      labels: ['Critical', 'High', 'Medium', 'Low', 'Info'],\n      datasets: [{\n        data: [\n          finding_stats.count_critical,\n          finding_stats.count_high,\n          finding_stats.count_medium,\n          finding_stats.count_low,\n          finding_stats.count_info\n          ],\n          backgroundColor: [\n            cssvar('--color-risk-critical'), \n            cssvar('--color-risk-high'), \n            cssvar('--color-risk-medium'), \n            cssvar('--color-risk-low'), \n            cssvar('--color-risk-info')\n          ],\n      }]\n    },\n    options: {\n      scales: {y: {beginAtZero: true, ticks: {precision: 0}}}, \n      plugins: {legend: {display: false}},\n    }\n  }\" /&gt;\n  &lt;figcaption&gt;Distribution of identified vulnerabilities&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"designer/charts/#example-doughnut-chart-of-cvss-score","title":"Example: Doughnut Chart of CVSS score","text":"<p>The following chart shows the CVSS score criticality as a doughnut chart with the score inside as number. The higher the score, the more of the chart area is filled.</p> <p></p> <pre><code>&lt;div class=\"cvss-chart\"&gt;\n    &lt;span class=\"cvss-chart-label\"&gt;&lt;span&gt;{{ finding.cvss.score }}&lt;/span&gt;&lt;/span&gt;\n    &lt;chart :width=\"5\" :height=\"5\" :config=\"{\n        type: 'doughnut',\n        data: {\n            datasets: [{\n                data: [\n                    finding.cvss.score, \n                    10.0 - finding.cvss.score\n                ],\n                backgroundColor: [\n                    cssvar('--color-risk-' + finding.cvss.level), \n                    cssvar('--color-risk-' + finding.cvss.level) + '50',\n                ],\n            }],\n        },\n        options: {\n            borderWidth: 0,\n            cutout: '70%',\n        }\n    }\" /&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.cvss-chart {\nposition: relative;\nwidth: 3cm;\nheight: 3cm;\n}\n.cvss-chart img {\nwidth: 100% !important;\nheight: 100% !important;\n}\n.cvss-chart-label {\nposition: absolute;\nwidth: 100%;\ntext-align: center;\ntop: 50%;\ntransform: translateY(-50%);\nline-height: 1;\nfont-size: 25pt;\n}\n</code></pre>"},{"location":"designer/charts/#plugins","title":"Plugins","text":"<p>ChartJS supports plugins to extend the functionality of charts. We provide the following plugins:</p> <ul> <li>chartjs-plugin-datalabels: Show labels on top of bars, lines, etc.</li> </ul> <p>Plugins are disabled by default. You can enable them using the <code>plugins</code> option in the <code>config</code> object of charts.</p> <pre><code>&lt;chart :config=\"{\n  plugins: [ chartjsPlugins.DataLabels ]\n}\" /&gt;\n</code></pre>"},{"location":"designer/debugging/","title":"Debugging","text":""},{"location":"designer/debugging/#template-data-debugging","title":"Template Data Debugging","text":"<p>JSON data of reports is available in templates for rendering. The structure of this data depends on your defined report and finding fields, i.e. it may be different for each Design.</p> <p>You can view the current data structure by dumping it in the PDF.</p> <pre><code>&lt;h1&gt;All available data&lt;/h1&gt;\n&lt;pre&gt;{{ data }}&lt;/pre&gt;\n\n&lt;h1&gt;Report&lt;/h1&gt;\n&lt;pre&gt;{{ report }}&lt;/pre&gt;\n\n&lt;h1&gt;Findings&lt;/h1&gt;\n&lt;pre&gt;{{ findings }}&lt;/h1&gt;\n</code></pre>"},{"location":"designer/debugging/#css-debugging","title":"CSS Debugging","text":"<p>There is no way to interactively debug CSS rules. The PDFs are rendered statically and returned as a file.  There exists no interactive CSS editor like dev tools console in browsers.</p> <p>However, you can set background colors or borders on elements to see where they are positioned and how big they are, e.g.</p> <pre><code>&lt;div id=\"element-to-debug\"&gt;...&lt;/div&gt;\n\n#element-to-debug {\n  background-color: rgba(255, 0, 0, 0.2);\n}\n</code></pre>"},{"location":"designer/design-guides/","title":"Design Guides","text":"<p>We provide many useful default styles in our <code>base.css</code>. You can import them to your report's CSS using:</p> <pre><code>@import \"/assets/global/base.css\"\n</code></pre> <p>If you want to customize the styles (like fonts, code blocks, etc.), have a look at the following chapters.</p> <p>Use the following snippets as a guide how to override the base styles.</p> <p>You do not need them, if you imported the base styles and don't need further customization.</p>"},{"location":"designer/design-guides/#headings","title":"Headings","text":"<pre><code>/* Avoid page breaks in headlines */\nh1, h2, h3, h4, h5, h6 {\nbreak-inside: avoid;\nbreak-after: avoid;\n}\n</code></pre>"},{"location":"designer/design-guides/#code","title":"Code","text":"<ul> <li><code>code</code>: code block and inline code</li> <li><code>pre code</code>: code block</li> <li><code>.code-block</code>: code block rendered from markdown</li> <li><code>.code-inline</code>: inline code rendered from markdown</li> </ul> <pre><code>pre code {\ndisplay: block !important;\nborder: 1px solid black;\npadding: 0.2em;\n}\ncode {\nbackground-color: whitesmoke;\n}\n\n/* Allow line wrapping in code blocks: prevent code from overflowing page */\npre {\nwhite-space: pre-wrap;\n}\n</code></pre>"},{"location":"designer/design-guides/#prevent-page-overflow-of-long-texts","title":"Prevent page overflow of long texts","text":"<pre><code>html {\noverflow-wrap: break-word;\n}\n</code></pre>"},{"location":"designer/design-guides/#justified-texts","title":"Justified texts","text":"<pre><code>p {\ntext-align: justify;\ntext-align-last: start;\n}\n</code></pre>"},{"location":"designer/design-guides/#lists","title":"Lists","text":"<p>Style list marker separately with <code>::marker</code> <pre><code>li::marker {\ncolor: red;\n}\n</code></pre></p>"},{"location":"designer/design-guides/#fonts","title":"Fonts","text":"<p>Fonts can be used in elements with the CSS rule <code>font-family</code>.</p> <p>Following example uses two fonts for the document:  <code>Roboto</code> for regular text (set for the whole <code>html</code> document) and  the monospace font <code>Source Code Pro</code> for <code>code</code> blocks.</p> <pre><code>html {\nfont-family: \"Noto Sans\", sans-serif;\nfont-size: 10pt;\n}\n\ncode {\nfont-family: \"Noto Sans Mono\", monospace;\n}\n</code></pre> <p>We provide a range of fonts ready to use. Following fonts are available:</p> <ul> <li>Noto Sans</li> <li>Noto Serif</li> <li>Open Sans - similar to Arial</li> <li>Roboto Flex</li> <li>Roboto Serif</li> <li>STIX Two Text - similar to Times New Roman</li> <li>Arimo - similar to Verdana</li> <li>Exo</li> <li>Lato*</li> <li>Roboto*</li> <li>Tinos*</li> </ul> <p>Monospace fonts (for code blocks):</p> <ul> <li>Roboto Mono</li> <li>Noto Sans Mono</li> <li>Source Code Pro</li> <li>Red Hat Mono</li> <li>Courier Prime*</li> </ul> <p>*Deprecated, replaced by similar-looking fonts</p>"},{"location":"designer/design-guides/#custom-fonts","title":"Custom Fonts","text":"<p>Custom fonts can be added with CSS <code>@font-face</code> rules. Requests to external systems are blocked.  Therefore you have to upload font files as assets and include them with their relative asset URL starting with <code>/asset/name/&lt;filename&gt;</code>.</p> <p>For google fonts you can generate the font files with this tool: https://google-webfonts-helper.herokuapp.com/fonts/ This generates all CSS rules and provides font files for download.</p> <p>It is possible to upload the <code>@font-face</code> CSS rules in a separate file and include it in the main stylesheet with their asset URLs.</p> <pre><code>@font-face {\nfont-family: 'Roboto';\nfont-weight: 400;\nsrc: url('/assets/name/roboto-regular.woff2')\n}\n</code></pre>"},{"location":"designer/designer/","title":"Report Designer","text":"<p>The report designer lets you customize how your final PDF reports look like. We do not limit your report look and feel in any way and allow you to customize your reports to your needs.</p> <p>A report design consists of following parts:</p> <ul> <li>Field definition<ul> <li>Defines what input fields are available in report sections and findings when writing report.</li> <li>Fields are available as form input fields when writing reports in the web interface.</li> <li>Field values are also available in Vue templates as variables.</li> </ul> </li> <li>HTML+VueJS template:    The VueJS template language is used for rendering HTML.   It is based on HTML and JavaScript.</li> <li>CSS Styles: Applied to HTML for styling the PDF.</li> </ul> <p>Here are basics of the Vue template language:</p> <ul> <li>Render variables with double curly braces <code>{{ var }}</code>:    <pre><code>&lt;h1&gt;{{ report.title }}&lt;/h1&gt;\n</code></pre></li> <li>Conditional rendering with <code>v-if=\"var\"</code> attributes:    <pre><code>&lt;section v-if=\"report.is_retest\"&gt;...&lt;/section&gt;\n&lt;div v-if=\"finding.affected_components.length &gt; 0\"&gt;...&lt;/div&gt;\n</code></pre></li> <li>Interations with <code>v-for=\"var_item in var_list\"</code>-loops:   <pre><code>&lt;section v-for=\"finding in findings\"&gt;\n  &lt;h2&gt;Finding title: {{ finding.title }}&lt;/h2&gt;\n&lt;/section&gt;\n</code></pre></li> <li>For more details and advanced features see the VueJS documentation</li> </ul>"},{"location":"designer/faqs/","title":"Frequently Asked Questions","text":"How to set solid color as page background? <p>Set background color for all pages <pre><code>@page {\nbackground-color: red;\n}\n</code></pre></p> <p>Set background color only on the first page (cover page) <pre><code>@page:first {\nbackground-color: red;\n}\n</code></pre></p> How to set a header background color? <pre><code>@page {\n--header-background-color: red;\n--header-margin-bottom: 5mm;\n\n@top-left-corner { content: \"\";\nbackground-color: var(--header-background-color); margin-bottom: var(--header-margin-bottom);\n}\n@top-center { content: \"\"; background-color: var(--header-background-color); margin-bottom: var(--header-margin-bottom);\nwidth: 100%;\n}\n@top-right-corner { content: \"\";\nbackground-color: var(--header-background-color); margin-bottom: var(--header-margin-bottom); }\n}\n</code></pre> Why are my font styles (e.g. italic or bold) not working? <p>We provide some preinstalled fonts that should work out of the box.</p> <p>If you want to use custom font, make sure to upload and include them in your CSS.</p> Why are my images or markdown not rendered in the report? <p>Your design may reference the variable incorrectly. Make sure to use this syntax: <pre><code>&lt;markdown :text=\"report.executive_summary\" /&gt;\n</code></pre></p> How to format links like normal text? <p>If you want all links to appear as normal text, use following CSS: <pre><code>a {\ncolor: inherit;\ntext-decoration: none;\nfont-style: inherit;\n}\n</code></pre></p> <p>If you want only target specific links, define a CSS class: <pre><code>.link-none {\ncolor: inherit;\ntext-decoration: none;\nfont-style: inherit;\n}\n</code></pre></p> <p>Then, add the defined class to your links.</p> <p>HTML: <pre><code>&lt;a href=\"https://www.example.com\" class=\"link-none\"&gt;https://www.example.com&lt;/a&gt;\n</code></pre> Markdown: <pre><code>[example.com](https://www.example.com){.link-none}\n</code></pre></p> How to reference the filename in the report? <p>This is not possible, unfortunately.</p> <p>However, if you want to display your filename in your report, you might define a custom report field (or generate a dynamic filename like <code>report_{report.customer_name}_{report.title}.pdf</code>) and copy the filename from the preview to the filename textbox.</p> How to highlight parts of code blocks with custom style? <p>Highlighting within code-blocks works with the attribute <code>highlight-manual</code> and the marker <code>\u00a7\u00a7</code> (see also):</p> <pre><code>```http highlight-manual\nPOST /\u00a7\u00a7important.php\u00a7\u00a7 HTTP/1.1\n```\n</code></pre> <p>To customize the hightlight style, add CSS styles for the <code>&lt;mark&gt;</code> tag, e.g.: <pre><code>mark {\n    background-color: red;\n}\n</code></pre></p> How to reduce the padding of code blocks? <p>Add following rules to CSS <pre><code>pre code {\npadding: 0.3em !important;\n}\n</code></pre></p> How to increase the space between list marker and text in lists? <p>Add following rules to CSS <pre><code>/* Bullet list */\nul &gt; li {\nlist-style: \"\\2022    \";\n}\n/* Numbered list */\nol &gt; li::marker {\ncontent: counter(list-item) \".   \\200b\";\n}\n</code></pre></p>"},{"location":"designer/field-types/","title":"Report Field Types","text":"<p>This page describes field types available in SysReptor and how to use them in reports and findings. </p> <p>Report and finding definitions define what input fields are available in report sections and findings when writing report.  Fields are available as form input fields when writing reports in the web interface. Field values are also available in Vue templates as variables.</p>"},{"location":"designer/field-types/#common-options","title":"Common Options","text":"<p>All fields have the following common options:</p> <ul> <li>ID: A unique identifier for the field. This ID is used to access the field in the HTML/Vue template.</li> <li>Data Type: The data type defines the structure of the field and its allowed values. See below for a list of available data types.</li> <li>Label: The label is shown in the input form when writing a report. It is a friendly name for users to understand what the field is for.</li> <li>Required: Mark the field as required (must be filled) or optional (can be empty). If a required field is not filled out, a warning message generated before publishing the report.</li> <li>Default Value: The default value is the initial value of the field when creating a new project. Some fields support TODOs in the default value to remind the user to fill out parts of the field.</li> </ul>"},{"location":"designer/field-types/#markdown","title":"Markdown","text":"<p>Markdown fields are used to write text blocks with markdown formatting. See Markdown Syntax for more information on markdown formatting.</p> <p></p> Usage in Vue templates<pre><code>&lt;markdown :text=\"report.field_markdown\" /&gt;\n</code></pre>"},{"location":"designer/field-types/#string","title":"String","text":"<p>String fields are used to write a short, single-line text. Compared to markdown fields, only a single line is allowed and no text formatting is available.</p> <p>Options:</p> <ul> <li>Spellcheck Supported: Enable or disable spellcheck for the field. Spellchecking is only useful for fields containing natural language text (e.g. a sentance, like for <code>short_description</code>). It is not useful for fields containing URLs, IDs, codes or other non-natural language text.</li> <li>Pattern: Regex pattern to validate the input. If the input does not match the pattern, a warning message is generated before publishing the report.</li> </ul> <p></p> Usage in Vue templates<pre><code>Text: {{ report.field_string }}\n</code></pre>"},{"location":"designer/field-types/#cvss","title":"CVSS","text":"<p>CVSS fields are used to write a CVSS vector. A graphical CVSS vector editor is available in the input form.</p> <p>Options:</p> <ul> <li>CVSS Version: Require a specific CVSS version (CVSS:3.1 or CVSS:4.0) or allow both versions.</li> </ul> <p></p> <p>The field content is a CVSS vector string or \"n/a\" to indicate that no CVSS vector is applicable. The CVSS score is calculated from the vector and shown in the input form and provided in Vue templates.</p> Usage in Vue templates<pre><code>Vector: {{ report.field_cvss.vector }}\nScore: {{ report.field_cvss.score }}\nLevel: {{ report.field_cvss.level }} &lt;!-- \"critical\", \"high\", \"medium\", \"low\", \"info\" --&gt;\nLevel (numeric): {{ report.field_cvss.level_number }} &lt;!-- 5, 4, 3, 2, 1 --&gt;\nCVSS Version: {{ report.field_cvss.version }} &lt;!-- \"3.1\", \"4.0\" --&gt;\n</code></pre>"},{"location":"designer/field-types/#enum","title":"Enum","text":"<p>Enum fields are used to select a single value from a list of predefined options.</p> <p>Options:</p> <ul> <li>Choices: A list of options to choose from. Each option has a value and a label. The value is used as the field value and the label is shown in the input form.</li> </ul> <p></p> Usage in Vue templates<pre><code>Value: {{ report.field_enum.value }}\nLabel: {{ report.field_enum.label }}\n</code></pre>"},{"location":"designer/field-types/#combobox","title":"Combobox","text":"<p>Combobox fields are a combination of an enum field and a string field. The user can select a predefined option or enter a custom value.</p> <p>Options:</p> <ul> <li>Suggestions: A list of predefined texts to choose from.</li> </ul> <p></p> Usage in Vue templates<pre><code>Text: {{ report.field_combobox }}\n</code></pre>"},{"location":"designer/field-types/#cwe","title":"CWE","text":"<p>CWE fields are used to select a CWE (Common Weakness Enumeration). This field is similar to an enum field, but provides more information about CWEs and enhanced search capabilities.</p> <p></p> Usage in Vue templates<pre><code>ID: {{ report.field_cwe.id }} &lt;!-- 284 --&gt;\nValue: {{ report.field_cwe.value }} &lt;!-- \"CWE-284\" --&gt;\nName: {{ report.field_cwe.name }} &lt;!-- \"Improper Access Control\" --&gt;\nDescription: {{ report.field_cwe.description }} &lt;!-- \"The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\" --&gt;\n</code></pre>"},{"location":"designer/field-types/#date","title":"Date","text":"<p>Date fields are used to select a date. A date picker is available in the input form.</p> <p></p> <p>Dates are stored in ISO 8601 format (YYYY-MM-DD). In Vue templates, the date can be formatted using the <code>formatDate()</code> function.</p> Usage in Vue templates<pre><code>ISO Date: {{ report.field_date }} &lt;!-- 2024-02-13 --&gt;\nFormatted Date: {{ formatDate(report.field_date, 'long', 'en-US') }} &lt;!-- February 13, 2024 --&gt;\n</code></pre>"},{"location":"designer/field-types/#number","title":"Number","text":"<p>Number fields are used to enter a numeric value.</p> <p></p> Usage in Vue templates<pre><code>Value: {{ report.field_number }}\n</code></pre>"},{"location":"designer/field-types/#boolean","title":"Boolean","text":"<p>Boolean fields are used to select a true or false value. This field is represented as a checkbox in the input form.</p> <p></p> <p>This field is useful enable/disable parts of the report rendering or change the behavior of the report template. Booleans values are often combined with <code>v-if</code> and <code>v-else</code> directives in Vue templates to conditionally render parts of the report.</p> Usage in Vue templates<pre><code>Value: {{ report.field_boolean }}\nIf: &lt;div v-if=\"report.field_boolean\"&gt;...&lt;/div&gt;&lt;div v-else&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"designer/field-types/#user","title":"User","text":"<p>User fields are used to select a user from the list of project members. In the Vue template the whole user object is available with the user's ID, name, email, phone number, etc.</p> <p> </p> Usage in Vue templates<pre><code>ID: {{ report.field_user.id }}\nName: {{ report.field_user.name }}\nEmail: {{ report.field_user.email }}\nFull Data: &lt;pre&gt;&lt;code&gt;{{ report.field_user }}&lt;/code&gt;&lt;/pre&gt; &lt;!-- \n{\n  \"id\": \"27a04015-353f-4237-8c71-f297c8395ad5\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+43 1234 5678\",\n  \"mobile\": \"+43 1234 5678\",\n  \"title_before\": null,\n  \"first_name\": \"John\",\n  \"middle_name\": null,\n  \"last_name\": \"Doe\",\n  \"title_after\": null,\n  \"roles\": [\"lead\", \"pentester\"]\n}\n--&gt;\n</code></pre>"},{"location":"designer/field-types/#object","title":"Object","text":"<p>Object fields are used to group multiple fields together. This is useful to structure complex data in the report.</p> <p>Options:</p> <ul> <li>Properties: A list of nested fields that are part of the object. Properties can have any data type. Note: Properties are ordered by their ID in the input form.</li> </ul> <p></p> Usage in Vue templates<pre><code>Property value: {{ report.field_object.property1 }}\nProperty value: {{ report.field_object.property2 }}\n</code></pre>"},{"location":"designer/field-types/#list","title":"List","text":"<p>List fields are used to dynamically add multiple values of a specific data type.</p> <p>Options:</p> <ul> <li>Item Type: The data type of the list items. The item type can be any data type, including other lists or objects.</li> </ul> <p></p> Usage in Vue templates<pre><code>List length: {{ report.field_list.length }}\nList item by index: {{ report.field_list[0] }}\nIterate over list items: &lt;div v-for=\"item in report.field_list\"&gt;{{ item }}&lt;/div&gt;\n</code></pre>"},{"location":"designer/figures/","title":"Figures","text":""},{"location":"designer/figures/#markdown-images","title":"Markdown images","text":"<p>When you embed images in markdown with <code>![title](img.png)</code> the <code>&lt;img&gt;</code> tags are wrapped in <code>&lt;figure&gt;</code> tags.  This allows to add captions with <code>&lt;figcaption&gt;</code> tags.</p> <p>It is recommended that you also use <code>&lt;figure&gt;</code> tags when placing images in your HTML template in text. Except for logos in headers or background images on the title page.</p> <pre><code>&lt;figure&gt;\n  &lt;img src=\"...\"&gt;\n  &lt;figcaption&gt;Caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"designer/figures/#image-width","title":"Image width","text":"<pre><code>![Image with half the page width](img.png){width=\"50%\"}\n![Exactly sized image](img.png){width=\"10cm\" height=\"7cm\"}\n</code></pre>"},{"location":"designer/figures/#basic-styling","title":"Basic styling","text":"<pre><code>/* Image styling */\n/* Prevent images from overflowing figure or page width */\nimg {\nmax-width: 100%;\n}\nfigure {\nbreak-inside: avoid;\ntext-align: center;\nmargin-left: 0;\nmargin-right: 0;\n}\nfigcaption {\nfont-weight: bold;\nbreak-before: avoid;\n}\n</code></pre>"},{"location":"designer/figures/#figure-numbering","title":"Figure numbering","text":"<pre><code>html {\ncounter-reset: figure-counter;\n}\n\nfigure:has(figcaption) {\ncounter-increment: figure-counter;\ncontent: \"Figure \" counter(figure-counter) \": \";\n}\n</code></pre>"},{"location":"designer/figures/#list-of-figures","title":"List of Figures","text":""},{"location":"designer/figures/#template-component","title":"Template Component","text":"<p>Works similar like table of contents. The component uses multi-pass rendering. In the first render-pass it does nothing, in the second pass it collects all previously rendered <code>&lt;figcaption&gt;</code> tags and provides them in the variable <code>items</code>.</p> <pre><code>&lt;list-of-figures id=\"lof\" v-slot=\"items\" &gt;\n    &lt;section v-if=\"items.length &gt; 0\"&gt;\n        &lt;h1 class=\"in-toc\"&gt;List of Figures&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"item in items\"&gt;\n                &lt;ref :to=\"item.id\" /&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;pagebreak /&gt;\n&lt;/list-of-figures&gt;\n</code></pre>"},{"location":"designer/figures/#referencing-figure-numbers","title":"Referencing figure numbers","text":"<pre><code>#lof li {\nlist-style: none;\nmargin: 0;\npadding: 0;\n}\n#lof .ref-figure::before {\ncontent: var(--prefix-figure) target-counter(attr(href), figure-counter) \" - \";\n}\n#lof .ref-figure &gt; .ref-title {\ndisplay: inline;\n}\n#lof .ref-figure::after {\ncontent: \" \" leader(\".\") \" \" target-counter(attr(href), page);\n}\n</code></pre>"},{"location":"designer/footnotes/","title":"Footnotes","text":""},{"location":"designer/footnotes/#markdown","title":"Markdown","text":"<pre><code>Text text^[I'm a footnote [link](https://example.com)] text.\n</code></pre>"},{"location":"designer/footnotes/#template-styling","title":"Template Styling","text":"<p>Elements are marked as footnotes with <code>float: footnote</code>. Footnotes use the built-in CSS counter <code>footnote</code>. It is incremented automatically.</p> <ul> <li>Styling the footnote area at the bottom of the page: <code>@page { @footnote { ... }}</code></li> <li>Styling the footnote reference in text: <code>::footnote-call { ... }</code></li> <li>Styling the footnote number in the footnote box at the bottom of the page: <code>::footnote-marker { ... }</code></li> <li>Styling footnote text content (shown at the bottom of the page): same selector (and child elements) where you applied <code>float: footnote</code> (e.g. <code>footnote</code> element)</li> </ul> <pre><code>This is a text with footnotes&lt;footnote&gt;I'm the footnote content&lt;/footnote&gt; in it.\n</code></pre> <pre><code>/* Footnotes */\n@page {\n@footnote {\npadding-top: 0.5em;\nborder-top: 1px solid black;\n}\n}\nfootnote {\nfloat: footnote;\n}\n/* Footnote number in text */\n::footnote-call {\ncontent: counter(footnote);\n}\n.footnote-call-separator {\ncontent: ',';\n}\n/* Footnote number in footnote area */\n::footnote-marker {\ncontent: counter(footnote) '.';\ndisplay: inline-block;\nwidth: 2em;\npadding-right: 1em;\ntext-align: right;\n}\n/* Styling links in footnotes */\nfootnote a {\ncolor: black;\ntext-decoration: none;\n}\n</code></pre>"},{"location":"designer/formatting-utils/","title":"Formatting Utilities","text":"<p>Multiple utility functions for formatting are available. </p>"},{"location":"designer/formatting-utils/#date-formatting","title":"Date Formatting","text":"<p>The <code>formatDate()</code> function takes three arguments:</p> <ul> <li>the date to be formatted</li> <li>(optional) format options<ul> <li>if not specified, the date is formatted as <code>{dateStyle: 'long'}</code> in the current locale of the report</li> <li>a string for either: <code>iso</code> (format: <code>yyyy-mm-dd</code>) or <code>full</code>, <code>long</code>, <code>medium</code>, <code>short</code> date style in the current locale of the report</li> <li>a object for Intl.DateTimeFormat options</li> </ul> </li> <li>(optional) locale to override the default locale: see Intl.DateTimeFormat locales</li> </ul> <p>Examples: <pre><code>2022-09-21: {{ formatDate(report.report_date, 'iso') }}\n\n21.09.22: {{ formatDate(report.report_date, 'short', 'de-DE') }}\n21.09.2022: {{ formatDate(report.report_date, 'medium', 'de-DE') }}\n21. September 2022: {{ formatDate(report.report_date, 'long', 'de-DE') }}\nMittwoch, 21. September 2022: {{ formatDate(report.report_date, 'full', 'de-DE') }}\n\n9/21/22: {{ formatDate(report.report_date, 'short', 'en-US') }}\nSep 21, 2022: {{ formatDate(report.report_date, 'medium', 'en-US') }}\nSeptember 21, 2022: {{ formatDate(report.report_date, 'long', 'en-US') }}\nWednesday, September 21, 2022: {{ formatDate(report.report_date, 'full', 'en-US') }}\n\nS 21, 22: {{ formatDate('2022-09-21', {year: '2-digit', month: 'narrow', day: '2-digit', numberingSystem: 'latn'}, 'en-US') }}\n&lt;/ul&gt;\n</code></pre></p>"},{"location":"designer/formatting-utils/#lodash-utilities","title":"Lodash Utilities","text":"<p>All lodash utility functions are available in templates as <code>lodash</code>.  See https://lodash.com/docs/ for a list of available functions.</p> <p>Examples: <pre><code>{{ lodash.capitalize(finding.cvss.level) }}\n{{ lodash.toUpper(finding.cvss.level) }}\n</code></pre></p>"},{"location":"designer/formatting-utils/#text-enumeration-formatting","title":"Text Enumeration Formatting","text":"<p>The <code>&lt;comma-and-join&gt;</code> template component allows joining text enumerations with commas and the last item with \"and\".  Some items might be optional and not be rendered always. This component takes care of inserting separators into the text.</p> <p>This example shows the basic usage for a static list of text parts.  It renders the number of findings for each severity level. If there are no findings for a severity level, the level is omitted. <pre><code>&lt;p&gt;\n  In the course of this penetration test\n  &lt;comma-and-join&gt;\n    &lt;template #critical v-if=\"finding_stats.count_critical &gt; 0\"&gt;&lt;strong class=\"risk-critical\"&gt;{{ finding_stats.count_critical }} Critical&lt;/strong&gt;&lt;/template&gt;\n    &lt;template #high v-if=\"finding_stats.count_high &gt; 0\"&gt;&lt;strong class=\"risk-high\"&gt;{{ finding_stats.count_high }} High&lt;/strong&gt;&lt;/template&gt;\n    &lt;template #medium v-if=\"finding_stats.count_medium &gt; 0\"&gt;&lt;strong class=\"risk-medium\"&gt;{{ finding_stats.count_medium }} Medium&lt;/strong&gt;&lt;/template&gt;\n    &lt;template #low v-if=\"finding_stats.count_low &gt; 0\"&gt;&lt;strong class=\"risk-low\"&gt;{{ finding_stats.count_low }} Low&lt;/strong&gt;&lt;/template&gt;\n    &lt;template #info v-if=\"finding_stats.count_info &gt; 0\"&gt;&lt;strong class=\"risk-info\"&gt;{{ finding_stats.count_info }} Info&lt;/strong&gt;&lt;/template&gt;\n  &lt;/comma-and-join&gt;\n  vulnerabilities were identified:\n&lt;/p&gt;\n</code></pre></p> <p>Following example renders a dynamic list of strings from a template variable joined with commas and \"and\": <pre><code>&lt;comma-and-join&gt;\n  &lt;template v-for=\"author, authorIdx in report.authors\" #[authorIdx]&gt;{{ author }}&lt;/template&gt;\n&lt;/comma-and-join&gt;\n</code></pre></p> <p>By default, <code>&lt;comma-and-join&gt;</code> concatenates text parts with commas and the last one with the english word \"and\". These separators can be changed via the parameters <code>comma=\", \"</code> and <code>and=\" and \"</code> to format other languages.</p> <p>This example joins text parts in different languages: <pre><code>English (default): &lt;comma-and-join&gt;...&lt;/comma-and-join&gt;\nEnglish (no commas, always \"and\"): &lt;comma-and-join comma=\" and \" and=\" and \"&gt;...&lt;/comma-and-join&gt;\nGerman: &lt;comma-and-join and=\" und \"&gt;...&lt;/comma-and-join&gt;\nFrench: &lt;comma-and-join and=\" et \"&gt;...&lt;/comma-and-join&gt;\n</code></pre></p>"},{"location":"designer/formatting-utils/#helper-functions","title":"Helper Functions","text":"<p>It is possible to define helper functions and variables inside the Vue template language to reuse logic. Setting variables only works for native DOM tag (e.g. <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, etc.), but not for Vue components (e.g. <code>&lt;template&gt;</code>, <code>&lt;table-of-contents&gt;</code>, etc.). The name of the <code>:set</code> attributes does not matter, but they have to be unique per tag. Helper functions are defined at the start of the template, they can be used by following template elements.</p> <pre><code>&lt;div \n  v-show=\"false\" \n  :set1=\"helperFunction = function() {\n    return report.title + ' processed by helper function';\n  }\"\n  :set3=\"calculateCustomScore = (finding) =&gt; finding.exploitability * finding.impact\"\n  :set2=\"computedProperty = computed(() =&gt; report.title + ' processed by computed property')\"\n\n/&gt;\n&lt;div&gt;\n  Call helper function (without arguments): {{ helperFunction() }}&lt;br&gt;\n  Call helper function (with arguments): {{ calculateCustomScore(report.findings[0]) }}&lt;br&gt;\n  Use computed property: {{ computedProperty.value }}&lt;br&gt;\n&lt;/div&gt;\n</code></pre> <p>Note that defining variables and helper functions is not officially supported by the Vue template language, but rather a workaround. For more details see: https://stackoverflow.com/questions/43999618/how-to-define-a-temporary-variable-in-vue-js-template</p>"},{"location":"designer/headings-and-table-of-contents/","title":"Headings and Table of Contents","text":"<p>We provide many useful default styles in our <code>base.css</code>. You can import them to your report's CSS using:</p> <pre><code>@import \"/assets/global/base.css\"\n</code></pre> <p>Headings and Table of Contents can be used out of the box with the imported styles. If you want to customize heading numberings or table of content (like margins, etc.), have a look at the following chapters.</p>"},{"location":"designer/headings-and-table-of-contents/#customization","title":"Customization","text":"<p>Use the following snippets as a guide how to override the base styles.</p> <p>You do not need them, if you imported the base styles and don't need further customization.</p> <p>CSS has counters to automatically number items such as headings, figures, etc. and also generate table of contents and list of figures with these numbers.</p> <p>This allows you to automatically produce a structure similar to <pre><code>1 Heading\n1.1 Subheading\n1.2 Subheading\n1.2.1 Subsubheading\n2 Heading\nA Appendix\nA.1 Appendix Subheading\n</code></pre></p> <p>Additional resources:</p> <ul> <li>CSS Counters<ul> <li>https://printcss.net/articles/counter-and-cross-references</li> <li>https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Counter_Styles/Using_CSS_counters</li> </ul> </li> </ul>"},{"location":"designer/headings-and-table-of-contents/#heading-numbers","title":"Heading Numbers","text":"<p>This example contains code for numbering headings with pure CSS. The heading number is placed in the <code>::before</code> pseudo-element in the DOM using CSS.</p> <p>CSS counters first have to be defined with <code>counter-reset: &lt;counter-name&gt;</code> (best place this rule in <code>html</code>). The counters by default start at <code>0</code>, but the start value can also be overwritten.</p> <p>Before the counter value is used, it should be incremented (such that chapter numbers start at 1, not 0) with <code>counter-increment: &lt;counter-name&gt;</code>. Now the counter has the correct value, we can embed it with <code>content: counter(&lt;counter-name&gt;)</code> in <code>::before</code> pseudo-elements.</p> <p>Counters are incremented and referenced with CSS rules in selectors. Counters have no global value at a given time, instead their values depend on the DOM-position of the elements that use them. For example: the custom <code>h1-counter</code> is incremented at every <code>&lt;h1&gt;</code> tag.  This means that between the first and the second <code>&lt;h1&gt;</code> tag in the DOM structure, the counter has the value <code>1</code>,  between the second and third <code>&lt;h1&gt;</code> it has the value 2 and so on.  When the CSS rule <code>h2::before { counter-increment: h2-counter; content: counter(h1-counter) \".\" counter(h1-counter); }</code> accesses the counter value of <code>h1-counter</code> the value is different depending on where the targeted <code>h2</code> element is placed in the DOM. Note that this <code>h2::before</code> rule is defined only once and applies to all <code>&lt;h2&gt;</code> tags.</p>"},{"location":"designer/headings-and-table-of-contents/#basic-heading-numbering","title":"Basic Heading Numbering","text":"<p>Add numbering to heading tags which have the class <code>numbered</code>.</p> <pre><code>html {\n/* Define counters and reset them */\ncounter-reset: h1-counter h2-counter h3-counter;\n}\n\n/* Heading numbers \nUsage in HTML: \n  &lt;h1 class=\"numbered\"&gt;Heading&lt;/h1&gt; =&gt; 1 Heading \n  &lt;h2 class=\"numbered\"&gt;Subheading&lt;/h2&gt; =&gt; 1.1 Subheading\n*/\nh1.numbered::before {\npadding-right: 5mm;\ncounter-increment: h1-counter;\ncontent: counter(h1-counter);\n}\nh2.numbered::before{\npadding-right: 5mm;\ncounter-increment: h2-counter;\ncontent: counter(h1-counter) \".\" counter(h2-counter);\n}\nh3.numbered::before{\npadding-right: 5mm;\ncounter-increment: h3-counter;\ncontent: counter(h1-counter) \".\" counter(h2-counter) \".\" counter(h3-counter);\n}\n\n/* Reset counters of sub-headings below the current level */\nh1.numbered {\ncounter-reset: h2-counter h3-counter;\n}\nh2.numbered {\ncounter-reset: h3-counter;\n}\n</code></pre>"},{"location":"designer/headings-and-table-of-contents/#appendix-numbering","title":"Appendix Numbering","text":"<p>If you want appendix sections that are numbered differently, an additional counter can be used that uses a different number formatting. E.g. with A, A.1, A.2, B, B.1, etc. instead contiuned numbering 4, 4.1, 4.2, 5, 5.1, etc.</p> <p>CSS counters can specify a counter style to use such as <code>upper-alpha</code> instead of decimal numbers.</p> <pre><code>html {\n/* NOTE: only one html {} block with counter-reset rules should exist; if there exist multiple, they overwrite each other */\ncounter-reset: h1-counter h2-counter h3-counter h1-appendix-counter;\n}\n\n/* Appendix heading numbers\nUsage in HTML: \n  &lt;h1 class=\"numbered-appendix\"&gt;Heading&lt;/h1&gt; =&gt; A Heading \n  &lt;h2 class=\"numbered-appendix\"&gt;Subheading&lt;/h2&gt; =&gt; A.1 Subheading\n*/\nh1.numbered-appendix::before {\npadding-right: 5mm;\ncounter-increment: h1-appendix-counter;\ncontent: counter(h1-appendix-counter, upper-alpha);\n}\nh2.numbered-appendix::before {\npadding-right: 5mm;\ncounter-increment: h2-counter;\ncontent: counter(h1-appendix-counter, upper-alpha) \".\" counter(h2-counter);\n}\nh3.numbered-appendix::before{\npadding-right: 5mm;\ncounter-increment: h3-counter;\ncontent: counter(h1-appendix-counter, upper-alpha) \".\" counter(h2-counter) \".\" counter(h3-counter);\n}\n\n/* Reset counters of sub-headings below the current level */\nh1.numbered-appendix {\ncounter-reset: h2-counter h3-counter;\n}\nh2.numbered-appendix {\ncounter-reset: h3-counter;\n}\n</code></pre>"},{"location":"designer/headings-and-table-of-contents/#table-of-contents","title":"Table of Contents","text":"<p>A table of contents can be included in reports via the <code>&lt;table-of-contents&gt;</code> component. This component collects all elements with the class <code>in-toc</code>, and provides them as variables. This component uses delayed multi-pass rendering to ensure that all items referenced in the TOC are already rendered and can be referenced.</p>"},{"location":"designer/headings-and-table-of-contents/#heading-numbers-in-toc","title":"Heading Numbers in TOC","text":"<p>Heading numbers can be added purely with CSS using counters. However, in order to use the correct counters, the nesting level of the heading needs to be known by CSS rules. These cannot be determined soely in CSS.</p> <p>The <code>&lt;table-of-contents&gt;</code> component determines the nesting level and provides this information. <code>h1</code> to <code>h6</code> tags are assigned the correct level.</p> <p>All HTML attributes of the target element are collected and passed to <code>&lt;table-of-contents&gt;</code>. This can be used to e.g. determine if an item is in an appendix section or regular chapter.</p>"},{"location":"designer/headings-and-table-of-contents/#table-of-contents-simple-example","title":"Table of Contents Simple Example","text":"<p>This example renders a table of contents with</p> <ul> <li>heading title</li> <li>page number</li> <li>links entries to the target pages, such that you can click on the TOC entries and jump to the referenced pa</li> </ul> <pre><code>&lt;table-of-contents v-slot=\"tocItems\"&gt;\n  &lt;ul class=\"toc\"&gt;\n    &lt;template v-for=\"item in tocItems\"&gt;\n      &lt;li :class=\"'level-' + item.level\"&gt;&lt;a :href=\"item.href\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt;\n    &lt;/template&gt;\n  &lt;/ul&gt;\n&lt;/table-of-contents&gt;\n</code></pre> <pre><code>.toc a {\ncolor: black;\n}\n\n.toc a::after {\nfont-weight: normal;\ncontent: \" \" target-counter(attr(href), page);\nfloat: right;\n}\n\n.toc ul {\nlist-style: none;\npadding: 0;\n}\n\n.toc .level-1 {\nmargin-top: 0.7em;\nfont-weight: bold;\n}\n.toc .level-2 {\npadding-left: 1.5em;\nmargin-top: 0.35em;\nfont-weight: normal;\n}\n.toc .level-3 {\npadding-left: 3em;\nmargin-top: 0.25em;\nfont-weight: normal;\n}\n</code></pre>"},{"location":"designer/headings-and-table-of-contents/#table-of-contents-complex-example","title":"Table of Contents Complex Example","text":"<p>This example renders a table of contents with</p> <ul> <li>heading number (via CSS counters)</li> <li>heading title</li> <li>a leader (line of dots between title and page number)</li> <li>page number</li> <li>links entries to the target pages, such that you can click on the TOC entries and jump to the referenced page</li> <li>supports regular chapters and appendix chapters</li> </ul> <pre><code>&lt;table-of-contents v-slot=\"tocItems\"&gt;\n    &lt;ul class=\"toc\"&gt;\n        &lt;template v-for=\"item in tocItems\"&gt;\n            &lt;li :class=\"['toc-level-' + item.level, (item.attrs.class || '').split(' ').includes('numbered') ? 'numbered' : '', (item.attrs.class || '').split(' ').includes('numbered-appendix') ? 'numbered-appendix' : '']\"&gt;\n                &lt;a :href=\"item.href\"&gt;{{ item.title }}&lt;/a&gt;\n            &lt;/li&gt;\n        &lt;/template&gt;\n    &lt;/ul&gt;\n&lt;/table-of-contents&gt;\n</code></pre> <pre><code>.toc {\npadding-left: 0;\n}\n.toc a {\ncolor: black;\ntext-decoration: none;\nfont-style: inherit;\n}\n.toc a::after {\ncontent: \" \" leader(\".\") \" \" target-counter(attr(href), page);\n}\n.toc li {\nlist-style: none;\npadding-left: 0;\n}\n.toc-level-1 {\nfont-size: 14pt;\nfont-weight: bold;\nmargin-top: 0.8em;\n}\n.toc-level-1.numbered a::before {\ncontent: target-counter(attr(href), h1-counter);\npadding-right: 5mm;\n}\n.toc-level-1.numbered-appendix a::before {\ncontent: target-counter(attr(href), h1-appendix-counter, upper-alpha);\npadding-right: 5mm;\n}\n\n.toc-level-2 {\nfont-size: 12pt;\nfont-weight: bold;\nmargin-top: 0.5em;\n}\n.toc-level-2.numbered a::before {\ncontent: target-counter(attr(href), h1-counter) \".\" target-counter(attr(href), h2-counter);\npadding-right: 5mm;\n}\n.toc-level-2.numbered-appendix a::before {\ncontent: target-counter(attr(href), h1-appendix-counter, upper-alpha) \".\" target-counter(attr(href), h2-counter);\npadding-right: 5mm;\n}\n\n.toc-level-3 {\nfont-size: 10pt;\nmargin-top: 0.4em;\n}\n</code></pre>"},{"location":"designer/headings-and-table-of-contents/#include-items-in-toc","title":"Include items in TOC","text":"<pre><code>&lt;h1 class=\"in-toc\"&gt;Table of Contents&lt;/h1&gt; &lt;!-- note the missing class \"numbered\" --&gt;\n&lt;h1 class=\"in-toc numbered\"&gt;Section 1&lt;/h1&gt;\n&lt;h2 class=\"in-toc numbered\"&gt;Subsection 1.1&lt;/h2&gt;\n&lt;h2 class=\"in-toc numbered\"&gt;Subsubsection 1.1.1&lt;/h2&gt;\n&lt;h1 class=\"numbered\"&gt;Section 2: Not in TOC&lt;/h1&gt;\n&lt;h1 class=\"in-toc numbered-appendix\"&gt;Appendix A&lt;/h1&gt;\n&lt;h2 class=\"in-toc numbered-appendix\"&gt;Appendix A.1&lt;/h2&gt;\n</code></pre>"},{"location":"designer/headings-and-table-of-contents/#referencing-sections-in-text-outside-of-toc","title":"Referencing sections in text (outside of TOC)","text":"<p>Headings can not only be referenced in the table of contents, but anywhere in the document. References can be added by creating an <code>&lt;a&gt;</code> tag that links to the <code>id</code> of an heading element.</p> <p>But there are some limitations in what you can reference: the nesting level cannot be determined automatically via CSS. You either have to manually specify the nesting level of the referenced heading or not include the heading number in the referenced text.</p> <pre><code>/* Reference chapter title */\n.chapter-ref-title::before {\ncontent: \"Chapter \" target-text(attr(href));\n}\n/* Reference appendix with number. It is assumed that all appendix subsections are on the same nesting level */\n.appendix-ref::before {\ncontent: \"Appendix \" target-counter(attr(href), h1-appendix-counter, upper-alpha) \".\" target-counter(attr(href), h2-counter) \" \" target-text(attr(href));\n}\n</code></pre> <p>See References for examples how to reference items.</p>"},{"location":"designer/page-layout/","title":"Page Layout","text":""},{"location":"designer/page-layout/#page-size","title":"Page size","text":"<p>Set the page margin such that all regular content fits in the page and there is enough space on the page borders for headers and footers. Page headers and footers should be inside the margin box to not overlap with text content.</p> <pre><code>@page {\nsize: A4 portrait;\nmargin: 35mm 20mm 25mm 20mm;\n}\n</code></pre>"},{"location":"designer/page-layout/#headers-and-footers","title":"Headers and Footers","text":"<p>Headers and footers are placed inside the page margin box (outside the regular page content). To display headers and footers at a fixed position on every page use <code>position: running(header)</code> in combination with <code>content: element(header)</code>.</p> <p>See:</p> <ul> <li>https://printcss.net/articles/running-headers-and-footers { target=_blank }</li> <li>https://www.w3.org/TR/css-gcpm-3/#running-syntax { target=_blank }</li> </ul> <pre><code>@page {\n@top-right {\ncontent: element(header-right);\n}\n}\n#header {\nposition: running(header-right);\n}\n#header img {\nheight: 2cm;\n}\n</code></pre> <pre><code>&lt;div id=\"header\"&gt;\n  Text or \n  &lt;img src=\"logo.png\" alt=\"logo\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"designer/page-layout/#hide-headers-on-title-page","title":"Hide headers on title page","text":"<p>Headers and footers are also rendered on the title page by default. To hide them, override <code>content</code> containing the <code>element(header)</code> on the first page.</p> <pre><code>@page :first {\n@top-right {\ncontent: \"\";\n}\n}\n</code></pre>"},{"location":"designer/page-layout/#page-numbers","title":"Page numbers","text":"<p>The page number is a built-in CSS counter that can be used in <code>content</code>. <pre><code>/* Add page number at the bottom right corner of pages */\n@page {\n@bottom-right-corner {\ncontent: counter(page) \" / \" counter(pages);\n}\n}\n\n/* Don't show page number on the title page */\n@page :first {\n@bottom-right-corner {\ncontent: \"\";\n}\n}\n</code></pre></p> <p>Page numbers can also be placed in footers together with additonal elements (see above).  The page counter then has to be used in a pseudo element such as <code>::before</code> or <code>::after</code>.</p>"},{"location":"designer/page-layout/#pagebreaks","title":"Pagebreaks","text":"<p>The easiest way to add a pagebreak is to include a <code>&lt;pagebreak /&gt;</code> component in the HTML template.</p> <p>In CSS page breaks can be controlled with  <pre><code>.selector {\nbreak-before: always;\nbreak-inside: avoid;\nbreak-after: always;\n}\n</code></pre></p>"},{"location":"designer/page-layout/#front-page-styling","title":"Front Page Styling","text":"<p>The title page often is very different from the rest of the report, because it has no continuous text. Often, it contains the report title, a pretty background image and  text blocks placed on specific locations not following any continuous text flow.</p> <p>It is best to place element at specific offsets using <code>position: absolute</code> in combination with <code>top/bottom</code> and <code>left/right</code>.</p> <p>You may also want to disable headers and footers on the title page (described above).</p> <pre><code>#page-cover {\n/* Use the full page; overlay page margin box */\nmargin: -35mm -20mm 26mm -20mm;\n}\n#page-cover-background {\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nheight: 12cm;\noverflow: hidden;\n}\n#page-cover-background img {\nwidth: 100%;\n}\n#page-cover-title {\nposition: absolute;\ntop: 6cm;\nleft: 4cm;\nright: 4cm;\n}\n</code></pre>"},{"location":"designer/tables/","title":"Tables","text":""},{"location":"designer/tables/#basic-table-styling","title":"Basic Table Styling","text":"<pre><code>table {\nwidth: 100%;\ncaption-side: bottom;\n}\n/* Avoid page breaks inside table rows */\ntr {\nbreak-inside: avoid;\n}\n\n/* Table borders */\ntable, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\n}\n/* Bold table headings */\nth {\nfont-weight: bold;\n}\n/* Table caption */\ntable caption {\nfont-weight: bold;\ntext-align: center;\n}\n</code></pre>"},{"location":"designer/tables/#complex-tables","title":"Complex Tables","text":"<p>See: https://www.w3.org/WAI/tutorials/tables/irregular/</p> <p>TLDR:</p> <ul> <li>Header spanning multiple columns: <code>&lt;th colspan=\"3\"&gt;</code></li> <li>Header spanning multiple rows: <code>&lt;th rowspan=\"3\" scope=\"rowgroup\"&gt;</code></li> </ul>"},{"location":"designer/tables/#vertial-text-in-row-headers","title":"Vertial Text in Row headers","text":"<p>Rotate text with <code>transform</code>.</p> <pre><code>&lt;table&gt;\n  &lt;caption&gt;Complex table with vertical text spanning multiple rows&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;th rowspan=\"3\" scope=\"rowgroup\" class=\"rowheader-vertical\"&gt;\n      &lt;p&gt;&lt;span&gt;Vertical Text&lt;/span&gt;&lt;/p&gt;\n    &lt;/th&gt;\n    &lt;th colspan=\"2\"&gt;Horizontal Text&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;!-- rows --&gt;\n&lt;/table&gt;\n</code></pre> <pre><code>.rowheader-vertical {\nwidth: 2em;\n}\n.rowheader-vertical p {\nwhite-space: nowrap;\noverflow: visible;\nwidth: 2em;\nmargin-left: 0.5em;\n}\n.rowheader-vertical p span {\ndisplay: inline-block;\ntransform: translateX(-50%) rotate(270deg) translateY(50%);\n}\n</code></pre>"},{"location":"designer/tables/#table-numbering","title":"Table numbering","text":"<pre><code>html {\ncounter-reset: table-counter;\n}\n\ntable:has(caption) {\ncounter-increment: table-counter;\n}\ncaption::before {\ncontent: \"Table \" counter(table-counter) \" - \";\n}\n</code></pre>"},{"location":"designer/tables/#list-of-tables","title":"List of Tables","text":""},{"location":"designer/tables/#template-component","title":"Template Component","text":"<p>Works similar like table of contents. The component uses multi-pass rendering. In the first render-pass it does nothing, in the second pass it collects all previously rendered <code>&lt;caption&gt;</code> tags and provides them in the variable <code>items</code>.</p> <pre><code>&lt;list-of-tables v-slot=\"items\"&gt;\n  &lt;section v-if=\"items.length &gt; 0\"&gt;\n    &lt;h1 class=\"in-toc\"&gt;List of Tables&lt;/h1&gt;\n    &lt;ul class=\"lot\"&gt;\n      &lt;template v-for=\"item in items\"&gt;\n        &lt;li&gt;\n          &lt;a :href=\"item.href\"&gt;{{ item.title }}&lt;/a&gt;\n        &lt;/li&gt;\n      &lt;/template&gt;\n    &lt;/ul&gt;\n  &lt;/section&gt;\n  &lt;pagebreak /&gt;\n&lt;/list-of-tables&gt;\n</code></pre>"},{"location":"designer/tables/#referencing-figure-numbers","title":"Referencing figure numbers","text":"<pre><code>.lot {\npadding-left: 0;\n}\n.lot li {\nlist-style: none;\npadding-left: 0;\n}\n.lot li a {\ncolor: black;\ntext-decoration: none;\n}\n.lot a::before {\ncontent: \"Table \" target-counter(attr(href), table-counter) \" - \";\n}\n.lot a::after {\ncontent: \" \" leader(\".\") \" \" target-counter(attr(href), page);\n}\n</code></pre>"},{"location":"finding-templates/create-finding/","title":"Creating findings from templates","text":"<p>When creating new findings, you can select a template to use. The contents of template fields are copied to a new finding.</p> <p>The template searchbar searches in template tags and the titles of all template translations. For example you can search for <code>xss</code> to find all templates containing the tag <code>xss</code> or the word <code>xss</code> in the title of any translation (English, German, etc.).</p> <p></p> <p>When selecting a template, you can select the language of the template to use. By default the language of the pentest project is selected. If no translation for the selected language is available, the main language of the template is used.</p>"},{"location":"finding-templates/multilingual/","title":"Multilingual templates","text":"<p>Templates can contain texts for multiple languages. This enabled you to manage all data of a template in one place even when it is translated in multiple languages. </p> <p></p> <p>Each template has a (required) main language and (optionally) multiple translations. The main language defines all fields that are required in the template (e.g. title, cvss, description, recommendation, references, etc.). Translations can override language-specific fields (e.g. title, description, recommendation, etc.). Fields that are not overridden are inherited from the main language (e.g. cvss, references).</p> <p>This approach allows for maximum flexibility in template translations, since you can translate each field separately for each language.</p> <p>Consider following scenario: </p> <p>You are writing a template in English, German and Dutch, where English is the main language and German and Dutch are translations. In the English template you fill the text fields for title, description and recommendation with vulnerability descriptions (and some TODO markers to insert screenshots and pentest project specific details). Additionally you define the language-independent fields CVSS and references.</p> <p>In the German and Dutch translations you only translate the title, description and recommendation fields need to be translated.  The CVSS and references fields are inherited from the English template.</p> <p>Let's consider you have found a great blog post describing the vulnerability in detail and want to use it as a reference in your report. However, the blog post is only available in German, so you cannot use the for the English and Dutch template. It is still possible to use them just for the German translation, by overriding the references field in the German translation. The Dutch translation still inherits the English references, but the German translation contains the additional reference.</p>"},{"location":"finding-templates/overview/","title":"Templates","text":"<p>Templates are blueprints for findings. They contain common description texts for findings and vulnerabilities. Describe your finding texts once in a template and reuse them in multiple pentest reports.  When writing a report, you just have to adapt the pentest specific details and add some screenshots.</p>"},{"location":"finding-templates/overview/#create-a-template","title":"Create a template","text":"<p>The template library is managed in the <code>Templates</code> section of the navigation bar. Every user is able to view and use all templates. Only users with the <code>is_template_editor</code> permission can create, edit and delete templates.</p> <p>You can either create a new empty template by clicking \"Create\", or from a finding an existing report:</p> <p></p>"},{"location":"finding-templates/overview/#template-fields","title":"Template fields","text":"<p>The fields available in templates are the same as in findings.  The template field definition is created from the finding fields of all global designs and predefined finding fields (e.g. title, cvss, description, recommendation, impact, summary, etc.).</p> <p>This ensures that templates are independent of designs and templates can be used in projects of any design. Each design can define custom fields (additionally to a set of predefined fields). These custom fields are available in templates.</p> <p>Some fields might not be relevant when creating templates because they are only relevant for findings in a specific design or contain project-specific settings. You can hide these fields in the template editor to focus on the relevant fields.</p> <p></p> <p>Markdown fields allow pasting images from your clipboard:</p> <p></p>"},{"location":"insights/archiving/","title":"Archiving","text":"<p> Pro only</p> <p>This page describes how SysReptor archives and encrypts old pentest projects. It gives an overview of the cryptographic architecture used to protect archives and explains the motivations behind.</p>"},{"location":"insights/archiving/#motivation-why-do-we-need-to-archive-pentest-projects","title":"Motivation - Why do we need to archive pentest projects?","text":"<p>As a penetration tester, you know how important it is to keep your pentest data safe and secure.  It contains highly sensitive data such as vulnerabilities of customer systems and how to exploit them.  Sometimes it takes some time to fix the vulnerabilities (or they marked it as \"risk accepted\"). It's crucial to safeguard pentest reports and pentest data to protect your customer's systems from malicious actors. In fact, you may even have signed an NDA or be subject to contractual penalties if this data is stolen, leaked, or published.</p> <p>But what happens when a pentest is completed and you no longer need to access that data on a regular basis? The most secure option is to delete all data associated with the pentest. However, this is often not possible. The report and pentest evidence (e.g. burp state, command history, scripts, etc.) have to be kept for the purposes of proof of work and warranty.</p> <p>Old pentest data should not be stored in plaintext. Instead they should be encrypted. Restricting access with a permissions is not sufficient, since a system administrator or service provider, for example, could also have access to the data. Access restrictions must be enforced through the use of cryptography.</p> <p>When encrypting pentest data, the question araises who will be able to decrypt the archive again? Balancing confidentiality with availability is an important question. Here are some thoughts to consider:</p> <ul> <li>Data is secure if no one can decrypt it anymore: This is certainly true, but it's important to remember that encryption is only one aspect of data security.    There are other factors to consider, such availability.   If no one can decrypt the data, it may become unavailable when it's needed, which can be a problem.</li> <li>What happens if someone leaves the company or loses the key? <ul> <li>If one key is used to encrypt all pentest archives, this key may not get lost. Else all data is inaccessible.</li> <li>If a different key is used to encrypt pentest archives (i.e. one key per archive), and they are all managed by the same person (e.g. in a password manager) and this person leaves the company, forgets the master key or dies. Again, everything is lost.</li> <li>If archives are encrypted with multiple keys and these keys are distributed to different persons, when one person loses their key, you have the same problem. And once again, everything is lost.</li> </ul> </li> <li>Should one person be able to decrypt everything alone?    To prevent unavailability through key loss, you can give the key to multiple persons.   Or you can also design an archiving system where each pentest archive is encrypted with multiple keys and each key is given to a different person.   Now everyone is able to decrypt all data on their own.</li> </ul> <p>Consider you are a pentesting team of four persons.  The optimal compromise between confidientiality and availablity of pentest archives would be to require two persons to access pentest archives. This prevents losing all data when one person (or even a second person) loses their key. It also prevents everyone from accessing all data (e.g. if a key is compromizes or someone leaves the company and wants to steals all data) alone. At least two persons are required, thus enforcing a 4-eye principle.</p>"},{"location":"insights/archiving/#crypto-architecture","title":"Crypto Architecture","text":"<p>We use a threshold cryptography scheme in combination with key management based on public key cryptography to cryptographically enforce the 4-eye principle.</p> <p>The core component to cryptographically enforce the 4-eye principle is Shamir Secret Sharing. Shamir Secret Sharing is a threshold sheme for sharing a secret to a group of n people whereas k people are required to work together to reconstruct the secret. The secret is split into n shares and every user is given one share. The threshold k defines how many shares are required to reconstruct the secret.  Shamir Secret Sharing has the property of information-theoretic security, meaning that even if an attacker steals some shares, it is impossible for the attacker to reconstruct the secret unless they have stolen k number of shares. No information about the secret can be gained from any number of shares below than the threshold</p> <p>In order to enforce a 4-eye principle to restore encrypted pentest archives, the threshold needs to be k=2. However it is possible to increase the threshold k to require 3 or more users for restoring pentest archives for larger companies.</p> <p>Shamir Secret Sharing only allows splitting secrets into shares. It does not handle encryption or key management. We use Shamir Secret Sharing for splitting an AES-Key into multiple Key Shares. Each Key Share is assigned to a different user.</p> <p>Key Shares are encrypted with user's public keys. The private keys are managed offline by users themselves. You can use software keys generated on your computer, but also security tokens such as YubiKeys that generate keys on hardware. Public-key cryptography allows users to create pentest project archives where multiple users have access, without requiring user interaction. For decrypting, user interaction is required. Each user has to decrypt their own Shamir Key Share with their private key.</p> <p>We use OpenPGP for public key encryption, because it supports RSA and elliptic curves and offers support for hardware tokens such as YubiKeys. OpenPGP is a secure, established and trustworthy crypto protocol with great tooling support. It is more user-friendly than using plain openssl and YubiKey CLI tools, and more trustworthy than custom developed crypto tools.</p> <p>Offloading cryptographic operations to hardware tokens such as YubiKeys is considered more secure than using software based encryption,  because the secret key is generated on hardware and never leaves the device. This prevents the private key from being leaked or exported. The downside, however, is that it cannot be backed up. If you lose the hardware token, the encrypted data is inaccessible. This is why we support multiple public/private key pairs per user.  For example if you use two public keys stored on hardware tokens and if you lose one, you can still restore archives with the second one.</p> <p>Following diagram outlines the process of archiving and encrypting a pentest project: </p> <ol> <li>Export all project data to a tar.gz archive.    This is the same format as directly exporting projects via the web interface.    All project data, sections, findings, notes, images, files including the design are exported.</li> <li>The tar.gz archive is encrypted with 256-bit AES-GCM. A random key is generated for each archive.    AES-GCM is an authenticated cipher mode (AEAD). Besides encrypting the data, a authentication tag is calculated which is able to detect modifications and corruptions of encrypted data, adding integrity-protection of the ciphertext.    The encrypted archive is stored in a file storage (ARCHIVED_FILE_STORAGE).</li> <li>The AES-key is distributed to multiple users with Shamir Secret Sharing.</li> <li>The Key Shares are encrypted with randomly generated 256-bit AES-GCM keys. Each Key Share is encrypted with a different key.    Plain Shamir Secret Sharing does not offer integrity-protection of Key Shares and does not detect if a Key Share used for decryption is valid or not.     This step adds integrity protection of Key Shares with the AES-GCM (and confidentiality protection with encryption).    The encrypted Key Shares are stored in the database.</li> <li>The AES keys are encrypted with user's public keys.</li> </ol>"},{"location":"insights/archiving/#how-to-use","title":"How to use","text":""},{"location":"insights/archiving/#prerequisite-register-user-public-keys","title":"Prerequisite: Register user public keys","text":"<p>Before users are able to archive pentest projects, all archiving users have to register their public keys. Public Keys need to be generated offline and uploaded to the user profile.</p> <p>SysReptor uses OpenPGP encryption keys as the public key format.  RSA and elliptic curve keys are supported. Minimum key lengths are enforced to ensure a sufficient security level for some years. For RSA, the minimum accepted key length is 3072 bit. For elliptic curve, the minium curve size is 256 bit.</p> Generate private keys with GPGGenerate private keys on YubiKey 5 <p>Use following commands to generate an elliptic curve encryption key with <code>gpg</code>.  Be sure to protect the key with a strong password and make backups. If you lose all your private keys, you can no longer restore archives.</p> <pre><code>cat &lt;&lt; EOF &gt; config.txt\nKey-Type: ECDSA\nKey-Curve: nistp521\nSubkey-Type: ECDH\nSubkey-Curve: nistp521\nSubkey-Usage: encrypt\nExpire-Date: 0\nName-Comment: SysReptor Archiving\nName-Real: &lt;your name&gt;\nName-Email: &lt;your email&gt;\nEOF\ngpg --batch --generate-key config.txt\n\ngpg --list-secret-keys --keyid-format=long\ngpg --armor --export &lt;key-id&gt;\n</code></pre> <p>Use the following command to generate a new Elliptic Curve key pair on a YubiKey 5. The private key is generated on the YubiKey and never leaves the device. Beware that you cannot backup the key. We recommend that you add a second key as a fallback in case you lose your YubiKey.</p> <pre><code>gpg --card-edit\n\nReader ...........: Yubico YubiKey FIDO CCID 00 00\nApplication ID ...: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 19763721\nName of cardholder: [not set]\nLanguage prefs ...: [not set]\nSalutation .......:\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: not forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nKDF setting ......: off\nUIF setting ......: Sign=off Decrypt=off Auth=off\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n\ngpg/card&gt; admin\nAdmin commands are allowed\n\n# Change Yubikey Pin (optional)\n# Hint: default pin is 123456, default admin pin is 12345678\ngpg/card&gt; passwd\ngpg: OpenPGP card no. XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX detected\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 3\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 1\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? Q\n\ngpg/card&gt; name\nCardholder's surname: &lt;your name&gt;\nCardholder's given name: &lt;your name&gt;\n\n# Change key type to elliptic curve (optional)\ngpg/card&gt; key-attr\nChanging card key attribute for: Signature key\nPlease select what kind of key you want:\n\u00a0\u00a0\u00a0(1) RSA\n\u00a0\u00a0\u00a0(2) ECC\nYour selection? 2\nPlease select which elliptic curve you want:\n\u00a0\u00a0\u00a0(1) Curve 25519 *default*\n\u00a0\u00a0\u00a0(4) NIST P-384\nYour selection? 1\nThe card will now be re-configured to generate a key of type: ed25519\nNote: There is no guarantee that the card supports the requested\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key type or size.  If the key generation does not succeed,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0please check the documentation of your card to see which\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key types and sizes are supported.\nChanging card key attribute for: Encryption key\nPlease select what kind of key you want:\n\u00a0\u00a0\u00a0(1) RSA\n\u00a0\u00a0\u00a0(2) ECC\nYour selection? 2\nPlease select which elliptic curve you want:\n\u00a0\u00a0\u00a0(1) Curve 25519 *default*\n\u00a0\u00a0\u00a0(4) NIST P-384\nYour selection? 1\nThe card will now be re-configured to generate a key of type: cv25519\nChanging card key attribute for: Authentication key\nPlease select what kind of key you want:\n\u00a0\u00a0\u00a0(1) RSA\n\u00a0\u00a0\u00a0(2) ECC\nYour selection? 2\nPlease select which elliptic curve you want:\n\u00a0\u00a0\u00a0(1) Curve 25519 *default*\n\u00a0\u00a0\u00a0(4) NIST P-384\nYour selection? 1\nThe card will now be re-configured to generate a key of type: ed25519\n\n# Generate key pair\ngpg/card&gt; generate\nMake off-card backup of encryption key? (Y/n) n\nPlease specify how long the key should be valid.\n0 = key does not expire\n\u00a0\u00a0\u00a0\u00a0&lt;n&gt;  = key expires in n days\n\u00a0\u00a0\u00a0&lt;n&gt;w = key expires in n weeks\n\u00a0\u00a0\u00a0&lt;n&gt;m = key expires in n months\n\u00a0\u00a0\u00a0&lt;n&gt;y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: &lt;your name&gt;\nEmail address: &lt;your email&gt;\nComment: SysReptor Archiving Key\nYou selected this USER-ID:\n\"&lt;your name&gt; (SysReptor Archiving Key) &lt;your email&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\npublic and secret key created and signed.\n\ngpg/card&gt; quit\n\ngpg --list-secret-keys --keyid-format=long\ngpg --armor --export &lt;key-id&gt;\n</code></pre> <p>During public key registration, you have to prove that you own the private key. A random verification message is generated and encrypted with the public key. You have to decrypt it with your private keys to prove that you own the private key and know how to decrypt data.</p>"},{"location":"insights/archiving/#archive-project","title":"Archive Project","text":"<p>Pentest projects first have to be marked as finished, then they can be archived.</p> <p>Before the archive is created and encrypted, all users are displayed that will have access to the archive and are able to restore it. This includes all project members and global archivers. Global archivers are added to every archived project and can be considered archiving backup users. Users can be marked as global archivers in the user permission settings.</p> <p>If too few users (below threshold) are project members or global archivers or do not have any public keys, archiving is not possible.</p> <p></p>"},{"location":"insights/archiving/#restore-archived-projects","title":"Restore Archived Projects","text":"<p>Archived projects are restored when the required number of users decrypt their key share with their private keys. Users decrypt their key shares separately, independently of each other.  When the user threshold is reached, the archived project is restored.</p> <p> </p> <p>All users should restore their key parts within 3 days. When some users decrypted their key shares, but others did not, the archive is reset.  Decrypted key shares are deleted, meaning that users have to decrypt their key shares again later with their public keys. This prevents partly dearchived projects being stored in the database forever, lowering the required user threshold when archives are actually restored.</p>"},{"location":"insights/archiving/#threshold-recommendations","title":"Threshold Recommendations","text":"<p>The recommended Shamir Secret Sharing threshold k is about half the number of users n, but at least 2. This ensures the best combination of confidentiality and availability. For large teams (e.g. &gt;5 global archivers), you might want to use a k below n / 2 to not require as many users for restoring archives.</p> <p>Note that not every user is added to an archive. Only project members and global archivers with public keys are added to archives and are able to access them.</p> <p>Example: You are a large pentesting company with 100 users.  A finished project should be archived, where 3 pentesters are project members. Only the 3 project members and (lets say) 2 global archivers will be added to the archive.</p> <p>Our recommendations:</p> <ul> <li>n = 1 users: k = 1 recommended</li> <li>n = 2 users: k = 1 or k = 2 recommended</li> <li>n = 3 users: k = 2 recommended</li> <li>n = 4 users: k = 2 recommended</li> <li>n = 5 users: k = 2 recommended</li> <li>n = 10 users: k = 3 or k = 4 recommended </li> </ul> <p>The threshold value is configured globally per instance by the settings ARCHIVING_THRESHOLD.</p>"},{"location":"insights/rendering-workflow/","title":"Rendering Workflow","text":"<p>Each pentest project needs a design which specifies how the final report looks like and what fields are available in the report and findings. The report designer lets you customize how your final PDF reports look like. We do not limit your report look and feel in any way and allow you to customize your reports to your needs.</p> <p>PDF rendering is a two-step process. First, the VueJS template is rendered to plain HTML with Headless Chromium. In this step report variables (section fields, findings) are embedded in the final HTML. Second, the HTML and CSS styles are rendered to a PDF using WeasyPrint.</p> <p></p>"},{"location":"insights/rendering-workflow/#two-rendering-engines-chromium-and-weasyprint","title":"Two rendering engines: Chromium and Weasyprint","text":"<p>You might be wondering why we combine two rendering engines.</p> <p>The short answer is: To make it easy to design amazing PDF reports with all features expected from a reporting tool. </p> <p>And here is the long answer:</p> <p>The rendering workflow may seem to require lot of resources and slow since we utilize Chromium.</p> <p>Yes, this approach is resource-intensive and rendering can take some time (typically between 3 and 10 seconds depending on the complexity and size of the report). However, we want to note that Chromium is not solely responsible for this.  On average, the VueJS rendering with Chromium takes about 1 second. The remaining time is required by WeasyPrint to generate the PDF.</p>"},{"location":"insights/rendering-workflow/#weasyprint-supports-advanced-css-printing-rules","title":"WeasyPrint supports advanced CSS printing rules","text":"<p>You may be wondering why we didn't just use Chromium to generate the PDFs and added the slow WeasyPrint. While Chromium does have a print to PDF feature, it is only suitable for printing web pages to save their content and is not ideal for creating aesthetically pleasing PDFs.  This is because Chromium has not implemented many CSS rules that are specific to the CSS printing spec, which are crucial for printing and generating PDFs. On the other hand, WeasyPrint was designed specifically to render PDFs and supports many of these printing CSS rules.</p>"},{"location":"insights/rendering-workflow/#server-side-rendering-renders-in-a-single-pass","title":"Server-side rendering renders in a single pass","text":"<p>You may also be wondering why we chose to use VueJS with Chromium instead of a simpler or faster template engine to render HTML.  Most template engines are designed for server-side rendering. They process the template from start to end, insert variables, evaluate expressions, iterate through loops and output the final HTML. Everything is rendered in a single pass.</p>"},{"location":"insights/rendering-workflow/#complex-documents-need-multi-pass-rendering","title":"Complex documents need multi-pass rendering","text":"<p>Let's consider following scenario:  You are designing a pentest report. It contains a fancy title page, management summary, section with static text (e.g. disclaimer) and list of findings. You had an interesting pentest and found many vulnerabilities, the report grows in size.  It is already 50 pages long and its hard to have an overview. Therefore, you want to add a table of contents to the beginning.  With single-pass rendering, you would have to generate the table of contents upfront before everything else, because it is on top of the template.</p> <p>This is not very flexible because the table of contents may contain sections with static texts defined in HTML, finding list, conditional sections that are rendered only in some situations (e.g. list of figures hidden when there are no figures in the report, optional appendix section for portscan results, etc.) or you might event want to include sections/headlines from markdown fields.</p>"},{"location":"insights/rendering-workflow/#manual-handling-of-dynamic-references-is-error-prone","title":"Manual handling of dynamic references is error-prone","text":"<p>When generating the table of contents you would have to make sure that you do not forget anything. Manually syncing the table of contents with the actual chapters is error-prone, especially, when make quick changes after some time and forget to update the table of contents.</p> <p>It would be better and more convenient when the table of contents is automatically generated from the renderd HTML content, such that includes all chapters from static text, dynamic finding lists and even markdown text. The same problem applies for all kind of lists that should be auto-generated based on the content. Another examples are list of figures or list of tables. They should include all figures or tables from the whole document. Figures might occur in static texts from the design or markdown fields of sections or findings. All should appear in the list of figures, regardless of their source.</p>"},{"location":"insights/rendering-workflow/#multi-pass-render-chapters-first-then-the-references","title":"Multi-pass: Render chapters first, then the references","text":"<p>In order to achive that, we need multi-pass rendering:  First render the actual chapters, in the second pass collect the defined chapters and render the table of contents. In LaTeX you need to compile at least twice for all references to be correct (table of contents, bibliography, citings, etc.).</p>"},{"location":"insights/rendering-workflow/#vuejs-is-super-dynamic","title":"VueJS is super-dynamic...","text":"<p>Here is where VueJS comes into play. Vue and other client-side JavaScript frameworks (React, Angular, etc.) are designed to be reactive. When some state changes or users interact with the website (user inputs, clicking, DOM events, etc.), the framework re-renders the HTML. It natively supports re-rendering parts of the template and therefore we can easily achieve multi-pass rendering. With Vue we can re-render the table of contents and other references until nothing changes anymore.</p>"},{"location":"insights/rendering-workflow/#and-delivers-a-great-ecosystem-with-additional-features","title":"...and delivers a great ecosystem with additional features","text":"<p>Besides multi-pass rendering, Vue (and JS) are client-side technologies with a great ecosystem of UI libraries, such as charts. We can reuse these libraries for PDF rendering and take advantage of existing, mature, actively maintained and well-documented UI libraries.</p>"},{"location":"insights/security-considerations/","title":"Security Considerations","text":""},{"location":"insights/security-considerations/#template-injection","title":"Template Injection","text":"<p>SysReptor uses server-side rendering for generating PDF reports.  This allows template injection attackers.</p> <p>This is intentional.</p> <p>The template injection is sandboxed in a dedicated Chromium process.  Chromium is running in offline mode. It has no possibility to connect to remote locations.  It requires an exploit in the Chromium browser to get access to the container.</p> <p> Cloud \u00b7 The Chromium process in our cloud is isolated in a dedicated Kubernetes pod. It receives rendering jobs via RabbitMQ, completes its rendering process and shuts down. An attacker breaking out of the Chromium process could prevent it from shutting down until a defined timeout. However, it would not be able to receive further rendering jobs.</p> <p> Self-Hosted \u00b7 The Chromium process in self-hosted environments runs in an isolated process in the web application's docker container by default. An attacker breaking out of the Chromium process can also compromise the web application. However, it is possible to outsource the rendering process into a dedicated docker container. This requires two additional docker containers: Chromium and RabbitMQ. However, the Chromium process will be able to receive further rendering jobs (in contrast to the cloud setup). For resource reasons, we do not use this setup in the standard installation. </p>"},{"location":"insights/security-considerations/#denial-of-service-dos","title":"Denial of Service (DoS)","text":"<p>PDF rendering is a long-running and resource intensive process. Especially WeasyPrint can sometimes be slow when rendering long and complex reports. </p> <p>Attackers can inject long-running instructions (via Vue, HTML or CSS) in templates. This might cause DoS of the rendering process. A timeout cancels the Vue template rendering process as soon as rendering time reaches a certain threshold.</p> <p>DoS prevention is currently not implemented for WeasyPrint. For now, we accept the risk of DoS in WeasyPrint, since we do not want to prevent rendering long and complex reports which might take some time and system resources.</p> <p>This behavior might change in the future.</p>"},{"location":"insights/security-considerations/#server-side-request-forgery-prevention","title":"Server-Side Request Forgery Prevention","text":"<p>All Requests to external systems from within the rendering workflow are blocked. This prevents data exfiltration to external systems if attackers inject templates or if there are vulnerabilities in third-party JS libraries.</p> <p>This is ensured by two measures:</p> <ol> <li>The headless Chromium instances uses the offline mode. This simulates that the browser is offline and blocks all outgoing requests.</li> <li>For WeasyPrint, we use a custom URL fetcher. This prevents requests to external systems.     It allows <code>data:</code>-URLs and access to files uploaded to SysReptor (designer assets, images) only.    No HTTP requests are involved when including these resources (neither to localhost),     but a custom handler that returns the resources as data following the     WeasyPrint security recommendations.</li> </ol>"},{"location":"reporting/locking/","title":"Locking of Findings and Sections","text":"<p>When multiple pentesters are working simultanuously on section, one pentester might overwrite changes of the other pentester. Therefore, we lock sections while one pentester is working on them.</p> <p> </p> Locked issue while pentester is editing <p>As soon as the pentester closes the tab or switches to another issue, the lock releases. In case of a sudden network interruption, we release the lock after 90 seconds of inactivity. Note that in this case, unsaved data might be overwritten.</p> <p>We also lock sections if a pentester tries to edit a finding in a second tab. This might also lead to data loss if he overwrites previously written content. In this case, the pentester can claim the lock by hitting \"Edit Anyway\".</p> <p> </p> Claim the lock"},{"location":"reporting/markdown-features/","title":"Markdown Features","text":"<p>The markdown syntax used in this project is based on the CommonMark spec with some extensions.</p> <p>This document briefly describes the most important markdown syntax. Non-standard markdown syntax is described more detailed.</p>"},{"location":"reporting/markdown-features/#common-markdown","title":"Common Markdown","text":"<pre><code># Heading h1\n## Heading h2\n### Heading h3\n#### Heading h4\n\nInline text styling: **bold**, _italic_, ~~strikethrough~~, `code`\n\nLinks: [Example Link](https://example.com)\n\n* list\n* items\n    * nested list\n\n1. numbered\n2. list\n\n```bash\necho \"multiline code block\";\n# with syntax highlighting\n```\n</code></pre>"},{"location":"reporting/markdown-features/#underline","title":"Underline","text":"<p>Underline is not supported in markdown. However you can insert HTML <code>&lt;u&gt;</code> tags to underline text.</p> <pre><code>Text with &lt;u&gt;underlined&lt;/u&gt; content.\n</code></pre>"},{"location":"reporting/markdown-features/#images","title":"Images","text":"<p>Images use the standard markdown syntax, but are rendered as figures with captions.</p> <pre><code>![Figure Caption](img.png){width=\"50%\"}\n\n![caption _with_ **markdown** `code`](img.png)\n</code></pre> <pre><code>&lt;figure&gt;\n  &lt;img src=\"https://example.com/img.png\" style=\"width: 50%\"&gt;\n  &lt;figcaption&gt;Figure Caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"reporting/markdown-features/#footnotes","title":"Footnotes","text":"<pre><code>Text text^[footnote content] text.\n</code></pre>"},{"location":"reporting/markdown-features/#tables","title":"Tables","text":"<p>For tables the GFM-like table syntax is used. This syntax is extended to support table captions.</p> <pre><code>| table   | header  |\n| ------- | ------- |\n| cell    | value   |\n\n: table caption\n</code></pre> <p>Markdown tables are somewhat limited and do not support rowspans, colspans or multiline cell values.  If you need one of these features, you can fall back to writing tables as inline HTML.</p>"},{"location":"reporting/markdown-features/#code-blocks","title":"Code blocks","text":"<p>Code blocks allow including source code and highlight it.</p> <p>The following example shows how to apply syntax highlighting to a HTTP request. Many other programming languages are also supported. <pre><code>```http\nPOST /login.php HTTP/1.1\nHost: sqli.example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 33\n\nusername='or'1'='1&amp;password=dummy\n```\n</code></pre></p> <p></p> <p>Syntax highlighting is great for readability, but it only highlights predefined keywords of the specified language. However, it does not allow to manually highlight certain text parts to draw the readers attention to it.</p> <p>You can enable manual highlighting by adding code-block meta attribute <code>highlight-manual</code>.  It is now possible to encapsulate highlighted areas with <code>\u00a7\u00a7highlighted content\u00a7\u00a7</code>. In the rendered HTML code, the content inside the two <code>\u00a7\u00a7</code>-placeholders is wrapped by a HTML <code>&lt;mark&gt;</code> tag. This works in combination with language-based syntax highlighting.</p> <p>This example highlights the vulnerable POST-parameter <code>username</code> in the HTTP body. <pre><code>```http highlight-manual\nPOST /login.php HTTP/1.1\nHost: sqli.example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 33\n\n\u00a7\u00a7username='or'1'='1\u00a7\u00a7&amp;password=dummy\n```\n</code></pre></p> <p></p> <p>If you need more advanced highlighting, you can place cutom HTML code inside the <code>\u00a7\u00a7</code> placeholders e.g. <code>\u00a7&lt;mark&gt;&lt;em&gt;&lt;span class=\"custom-highlight\"&gt;\u00a7</code>. If your code snippet includes <code>\u00a7</code>-characters, you cannot use them as escape characters for manual highlighting.  It is possible to specify a different escaple character via the <code>highlight-manual=\"&lt;escape-character&gt;\"</code> attribute. Make sure that the escape character is not present in the code block.</p> <p>The following example uses <code>\"|\"</code> as escape character and a custom HTML markup for highlighting. <pre><code>```http highlight-manual=\"|\"\nPOST /login.php HTTP/1.1\nHost: sqli.example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 33\n\n|&lt;mark&gt;&lt;em&gt;&lt;span class=\"custom-highlight\"&gt;|username='or'1'='1|&lt;/span&gt;&lt;/em&gt;&lt;/mark&gt;|&amp;password=dummy\n```\n</code></pre></p>"},{"location":"reporting/markdown-features/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<p>Mermaid lets you create diagrams and visualizations using text and code.  It is a JavaScript based diagramming and charting tool that renders Markdown-inspired text definitions to create and modify diagrams dynamically.</p> <p>Mermaid diagrams are written in markdown code blocks with the language set to <code>mermaid</code>. All diagram types supported by mermaid are avaialbe. Diagrams will be rendered as HTML <code>&lt;figure&gt;</code> elements. Like with images, you can set a caption and with/height.</p> <p>The following example shows how to create a simple flowchart.  <pre><code>```mermaid caption=\"Organizational Structure\" width=\"50%\"\nflowchart TD\n  A[\ud83d\udc54 CEO]\n  A--&gt;B[\ud83d\udcbb CTO]\n  A--&gt;C[\ud83d\udcb0 CFO]\n  A--&gt;D[\ud83d\udcc8 COO]\n```\n</code></pre></p> <p></p> <pre><code>```mermaid caption=\"Man in the Middle Attack\"\n%%{init: {\"sequence\": {\"mirrorActors\": false}}}%%\nsequenceDiagram\n    actor Alice\n    actor Eve\n    actor Bob\n    Eve-&gt;&gt;Alice: give public key, pretend it is Bob's\n    Alice-&gt;&gt;Alice: encrypt message with Eve's key&lt;br&gt;thinking it is Bob's\n    Alice-&gt;&gt;Eve: send encrypted message\n    Eve-&gt;&gt;Eve: decrypt message and copy content\n    Eve-&gt;&gt;Eve: encrypt message using Bob's key\n    Eve-&gt;&gt;Bob: send encrypted message\n```\n</code></pre> <p></p>"},{"location":"reporting/markdown-features/#html-attributes","title":"HTML Attributes","text":"<p>This extension allows you to set HTML attributes from markdown. Place attributes in curly braces directly after the targeted element (without spaces between).  Attributes are key value pairs (<code>attr-name=\"attr-value\"</code>) Shortcuts for setting the attribute <code>id</code> (<code>#id-value</code>) and <code>class</code> (<code>.class-value</code>) are supported.</p> <pre><code>## Headline in Table of Contents {.in-toc .numbered}\n\n![image](img.png){#img-id .image-class1 .image-class2 width=\"50%\"}\n\nText with [styled link](https://example.com/){class=\"link-class\" style=\"color: red\"} in it.\n</code></pre>"},{"location":"reporting/markdown-features/#inline-html","title":"Inline HTML","text":"<p>If something is not possible with markdown, you can fall back to writing HTML code and embed it in the markdown document.</p> <p>Following example shows a figure containing two images side-by-side. <pre><code>Text *with* **markdown** `code`.\n\n&lt;figure class=\"figure-side-by-side\"&gt;\n  &lt;img src=\"img1.png\" /&gt;\n  &lt;img src=\"img2.png\" /&gt;\n  &lt;figcaption&gt;Two images side-by-side&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre></p> <p>It is also possible to embed markdown inside HTML blocks. An empty line is required as a seperator between HTML and markdown. Following example shows a complex table that is not possible with the markdown table syntax.</p> <pre><code>Text *with* **markdown** `code`.\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;th&gt;Col1&lt;/th&gt;\n    &lt;th&gt;Col2&lt;th&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;th colspan=\"2\"&gt;Sub-header spanning two columns&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Cell 1&lt;/td&gt;\n      &lt;td&gt;\n\n        This cell is rendered as markdown. You can use\n        * `markdown` _elements_\n* such as **lists** for example\n        * but make sure to seperate HTML and markdown blocks with an empty line\n\n      &lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"reporting/references/","title":"References","text":"<p>Use the <code>id</code>-attributes of HTML elements for referencing items in your report. This allows you to reference for example:</p> <ul> <li>Headings</li> <li>Figures</li> <li>Tables</li> <li>Findings</li> <li>and everything that has an <code>id</code></li> </ul>"},{"location":"reporting/references/#reference-images","title":"Reference Images","text":"Markdown<pre><code>![SQL Injection](/assets/name/image.png){#sqli}\nAs you see in [](#sqli) (e.g. rendered as \"Figure 3\")\n</code></pre> HTML<pre><code>&lt;figure id=\"sqli\"&gt;&lt;img src=\"/assets/name/image.png\"&gt;&lt;figcaption&gt;SQL Injection&lt;/figcaption&gt;&lt;/figure&gt;\nAs you see in &lt;ref to=\"sqli\" /&gt; (e.g. rendered as \"Figure 3\")\n</code></pre>"},{"location":"reporting/references/#reference-findings","title":"Reference Findings","text":"<p>You need the finding ID of the finding you want to reference.</p> <ol> <li>Open the other finding that should be linked</li> <li>Copy the last UUID from the URL </li> </ol> Markdown<pre><code>See [](#00000000-0000-0000-0000-000000000000)... (e.g. rendered as \"1.3 SQL injection\")\n</code></pre> HTML<pre><code>See &lt;ref to=\"#00000000-0000-0000-0000-000000000000\" /&gt;... (e.g. rendered as \"1.3 SQL injection\")\n</code></pre>"},{"location":"reporting/references/#reference-headings","title":"Reference Headings","text":"<p>You can reference headings if your design supports it.</p> Markdown<pre><code># Findings {#findings .in-toc.numbered}\nFind details in [](#findings) (rendered as \"1 Findings\").\n</code></pre> HTML<pre><code>&lt;h1 id=\"findings\" class=\"in-toc numbered\"&gt;Findings&lt;/h1&gt;\nFind details in &lt;ref to=\"findings\" /&gt; (rendered as \"1 Findings\").\n</code></pre>"},{"location":"reporting/spell-check/","title":"Spell Check","text":"<p> Pro only</p> <p>We provide spell checking via the Open Source version of LanguageTool. Language Tool runs isolated from other processes in separate container. The application reaches LanguageTool via REST-API.</p>"},{"location":"reporting/spell-check/#add-words-to-dictionary","title":"Add Words to Dictionary","text":"<p>Users can add words to the LanguageTool dictionary.</p> <p> </p> Add to dictionary <p>This updates the dictionary for all users by default. You can configure your installation to add words to a per-user dictionary. Per-user dictionaries are not shared between users. When one user adds an unknown word to his dictionary, it will still be unknown for other users. This is even when they are working on the same project and the same finding.</p> <p>This is an installation-wide setting. It cannot be configured per user or project.</p> <p>PS: You can also configure the spell check rules.</p> <p> Cloud \u00b7 Please contact us and we will reconfigure your installation.</p> <p> Self-Hosted \u00b7 Set the <code>SPELLCHECK_DICTIONARY_PER_USER</code> in your <code>app.env</code> to true.</p>"},{"location":"reporting/version-history/","title":"Version History","text":"<p> Pro only</p> <p>The Version History allows you to view previous versions of objects (such as Projects, Findings, Notes, Templates, Designs) and shows you who made changes and when. (Personal notes do not have a version history.)</p> <p> </p> Version History of Finding <p>New versions are created time-based and action-based.</p> <p>Action-based versions are created when fields change that have a bigger impact on the state of the saved object. For example when:</p> <ul> <li>an object is created or deleted</li> <li>a project is marked as finished</li> <li>the project design changes or</li> <li>the status or assignee of an object changes</li> </ul> <p>Time-based versions are created with every save operation. A scheduled task then cleans up the versions so that there is one version for about every two hours. When users pauses for longer, the last state of their changes are saved. If other users make changes in the meantime, it is still possible to view the object at the time where the first user left off.</p>"},{"location":"reporting/version-history/#deletion","title":"Deletion","text":"<p>If you delete a finding or a note in a project, the version history is preserved. You can access deleted items in the project overview.</p> <p> </p> Access deleted note <p>However, if you delete a Project, Design or Finding Template, the history is deleted either.</p>"},{"location":"reporting/version-history/#exports","title":"Exports","text":"<p>If you export an object (e.g. a project) it does not include the version history. This is to prevent unintended leaks of sensitive information and to reduce the file size of exported objects.</p> <p>This means that if you export and re-import a project, it will no longer have a version history (but the original project will).</p>"},{"location":"reporting/version-history/#encrypted-archiving","title":"Encrypted Archiving","text":"<p>If projects are archived, the version history is deleted.  </p>"},{"location":"reporting/version-history/#backups","title":"Backups","text":"<p>Backups include the version history. If a backup is restored, the version history is either.</p>"},{"location":"setup/backups/","title":"Backups","text":"<p> Pro only</p>"},{"location":"setup/backups/#create-backups-via-cli","title":"Create backups via CLI","text":"<p> Self-Hosted</p> <p>Backups can be created via a CLI command or an API request. The backup archive contains a database export and all uploaded files.</p> <p>Execute following command to create a backup: Create backup via CLI<pre><code>docker compose run app python3 manage.py backup &gt; backup.zip\n</code></pre></p> <p>Backups can be encrypted using a 256-bit AES key.  Specify the key as hex string via the <code>--key</code> CLI argument. Create encrypted backup via CLI<pre><code>docker compose run app python3 manage.py backup --key \"&lt;aes-key-as-hex&gt;\" &gt; backup.zip.crypt\n</code></pre></p>"},{"location":"setup/backups/#create-backups-via-api","title":"Create backups via API","text":"<p> Cloud \u00b7  Self-Hosted</p>"},{"location":"setup/backups/#prerequisites","title":"Prerequisites","text":"<p>Creating backups is a high-privilege operation. Therefore, access to the backup API endpoint is restricted. Only <code>system</code>-users can access this endpoint in combination with a <code>BACKUP_KEY</code>. Neither regular users nor superusers have access to the backup API endpoint.</p> <p>Additionally, you need to configure a <code>BACKUP_KEY</code> as environment variable. This backup key has to be at least 20 characters long. If no <code>BACKUP_KEY</code> is configured, the backup API endpoint is disabled.</p> <p>Optionally, the backup can be encrypted via a 256-bit AES key provided in the HTTP request body.</p>"},{"location":"setup/backups/#api-requests","title":"API Requests","text":"<pre><code># Create backup\ncurl -X POST https://sysreptor.example.com/api/v1/utils/backup/ -d '{\"key\": \"&lt;backup-key&gt;\"}' -H 'Cookie: sessionid=&lt;session-id&gt;' -H \"Content-Type: application/json\" -o backup.zip\n\n# Create encrypted backup\ncurl -X POST https://sysreptor.example.com/api/v1/utils/backup/ -d '{\"key\": \"&lt;backup-key&gt;\", \"aes_key\": \"&lt;aes-key-as-hex&gt;\"}' -H 'Cookie: sessionid=&lt;session-id&gt;' -H \"Content-Type: application/json\" -o backup.zip.crypt\n</code></pre>"},{"location":"setup/backups/#restore-backups","title":"Restore backups","text":"<p> Self-Hosted</p> <p>Make sure that you have an empty database and empty data directories (i.e. empty docker volumes). Otherwise, you will lose your old data. During the backup restore, all existing data in the database and file storages is deleted.</p> <p>It is recommended to import the backup into the same SysReptor version like the one that was used to create the backup. If a different version is used the database schema might not be compatible.</p> Restore backup via CLI<pre><code>cat backup.zip | docker compose run --no-TTY app python3 manage.py restorebackup\n</code></pre> <p>Encrypted backups can be restored as well. Specify the AES key as hex string via the <code>--key</code> CLI argument. Restore encrypted backup via CLI<pre><code>cat backup.zip.crypt | docker compose run --no-TTY app python3 manage.py restorebackup --key \"&lt;aes-key-as-hex&gt;\"\n</code></pre></p>"},{"location":"setup/configuration/","title":"Configuration","text":"<p><code>app.env</code> (located in <code>deploy</code> directory) controls the behaviour of your SysReptor installation.  </p> <p>After making changes, go to <code>sysreptor/deploy</code> and restart the containers:</p> ProfessionalCommunity <pre><code>docker compose up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml up -d\n</code></pre> <p> Cloud \u00b7 We take care of all configurations. If you want to change anything, please contact us.</p>"},{"location":"setup/configuration/#avaliable-options","title":"Avaliable Options","text":"<p> Self-Hosted</p>"},{"location":"setup/configuration/#django-secret-key","title":"Django Secret Key","text":"<p>Django server secret key (see https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-SECRET_KEY). Make sure this key remains secret.</p> Generate random secret key:<pre><code>printf \"SECRET_KEY=$(openssl rand -base64 64 | tr -d '\\n=')\\n\"\n</code></pre> Example (regenerate this value!):<pre><code>SECRET_KEY=\"TODO-change-me-Z6cuMithzO0fMn3ZqJ7nTg0YJznoHiJXoJCNngQM4Kqzzd3fiYKdVx9ZidvTzqsm\"\n</code></pre>"},{"location":"setup/configuration/#data-encryption-at-rest","title":"Data Encryption at Rest","text":"<p>Encrypt data at rest by configuring an encryption key. This will encrypt sensitive data in your database and files uploaded in your notes (except images, images are also encrypted).</p> <p>Database and file storage administrators cannot access encrypted data. The key is held in the web application. Data encryption at rest does not help against malicious actors with access to the web server.</p> <p>You have to define one <code>DEFAULT_ENCRYPTION_KEY_ID</code> which will be used for data encryption. However, you can rotate your keys by defining multiple keys in <code>ENCRYPTION_KEYS</code>. All specified keys are used for decrypting stored data.</p> <p>Note that the <code>DEFAULT_ENCRYPTION_KEY_ID</code> must be part of <code>ENCRYPTION_KEYS</code>.</p> Generate random encryption keys:<pre><code>KEY_ID=$(uuidgen) &amp;&amp; printf \"ENCRYPTION_KEYS=[{\\\"id\\\": \\\"${KEY_ID}\\\", \\\"key\\\": \\\"$(openssl rand -base64 32)\\\", \\\"cipher\\\": \\\"AES-GCM\\\", \\\"revoked\\\": false}]\\nDEFAULT_ENCRYPTION_KEY_ID=\\\"${KEY_ID}\\\"\\n\"\n</code></pre> Example (regenerate these values!):<pre><code>ENCRYPTION_KEYS='[{\"id\": \"TODO-change-me-unique-key-id-5cdda4c0-a16c-4ae2-8a16-aa2ff258530d\", \"key\": \"256 bit (32 byte) base64 encoded AES key\", \"cipher\": \"AES-GCM\", \"revoked\": false}]'\nDEFAULT_ENCRYPTION_KEY_ID=\"TODO-change-me-unique-key-id-5cdda4c0-a16c-4ae2-8a16-aa2ff258530d\"\n</code></pre>"},{"location":"setup/configuration/#debug-mode","title":"Debug mode","text":"<p>Debug mode enables Django's debug toolbar and stack traces. Do not use debug mode in production environments.</p> Example:<pre><code>DEBUG=off\n</code></pre>"},{"location":"setup/configuration/#fido2webauthn","title":"FIDO2/WebAuthn","text":"<p>If you want to use FIDO2/WebAuthn for MFA, you have to define the hostname (WebAuthn Relying Party ID) of your installation.</p> Example:<pre><code>MFA_FIDO2_RP_ID=\"sysreptor.example.com\"\n</code></pre>"},{"location":"setup/configuration/#license-key","title":"License Key","text":"<p> Pro only</p> <p>License key for SysReptor Professional.</p> Example:<pre><code>LICENSE=\"your-license-key\"\n</code></pre>"},{"location":"setup/configuration/#single-sign-on-sso","title":"Single Sign-On (SSO)","text":"<p> Pro only</p> <p>Configuration for SSO via OIDC. Find detailed instructions at https://docs.sysreptor.com/setup/oidc-setup/.</p> OIDC example:<pre><code>OIDC_AZURE_TENANT_ID=\"azure-tenant-id\"\nOIDC_AZURE_CLIENT_ID=\"azure-client-id\"\nOIDC_AZURE_CLIENT_SECRET=\"azure-client-secret\"\n\nOIDC_GOOGLE_CLIENT_ID=\"google-client-id\"\nOIDC_GOOGLE_CLIENT_SECRET=\"google-client-secret\"\n</code></pre> <p>If your reverse proxy enforces authentication and provides the username via a HTTP-Header, use following settings to enable SSO.</p> Remote-User example<pre><code>REMOTE_USER_AUTH_ENABLED=true\nREMOTE_USER_AUTH_HEADER=\"Remote-User\"\n</code></pre> <p>By default users can decide whether they want to log in via SSO or username/password. It is possible to disable login via username/password. Make sure all users have SSO identities configured before enabling this option. Else they will not be able to log in anymore.</p> Disable username/password authentication example<pre><code>LOCAL_USER_AUTH_ENABLED=false\n</code></pre> <p>Configuration of the default authentication provider when multiple authentication providers are enabled (e.g. OIDC via Azure AD and username/password). This setting will redirect users to the default authentication provider, skipping the selection. Other authentication providers can still be used if login via the default provider fails.</p> <p>Possible values: <code>azure</code>, <code>google</code>, <code>remoteuser</code>, <code>local</code> (username/password authentication)</p> Default authentication provider example<pre><code>DEFAULT_AUTH_PROVIDER=\"azure\"\nDEFAULT_REAUTH_PROVIDER=\"local\"\n</code></pre>"},{"location":"setup/configuration/#spell-check","title":"Spell Check","text":"<p> Pro only</p> <p>You can add words to the spell check dictionary in the markdown editor (see https://docs.sysreptor.com/reporting/spell-check/).</p> <p>Words are added to a global spell check dictionary by default, which is available to all users. If words should be added to user's personal spell check dictionaries, set this setting to <code>true</code>. </p> <p>Using both global and personal dictionaries at the same time is not possible. Words of personal dictionaries are not shared between users. If one user adds an unknown word to their personal dictionary, the spell checker will still detect an error for other users, even when they are working in the same project or finding.</p> Spell check dictionary configuration<pre><code>SPELLCHECK_DICTIONARY_PER_USER=false\n</code></pre> <p>The picky mode enables additional spell check rules. </p> <p>It is also possible to selectively enable and disable rules or rule-categories by passing a LanguageTool configuration as JSON.  See https://languagetool.org/http-api/ for available options on the <code>/check</code> request. See https://community.languagetool.org/rule/list for available rules (note: rule IDs might differ for languages).</p> Spell check rule configuration<pre><code>SPELLCHECK_MODE_PICKY=true\nSPELLCHECK_LANGUAGETOOL_CONFIG='{\"disabledRules\": \"TODO,TO_DO_HYPHEN,PASSIVE_VOICE,PASSIVE_SENTENCE_DE\"}'\n</code></pre>"},{"location":"setup/configuration/#languages","title":"Languages","text":"<p>Configure which languages are available in the language selection. By default all languages are shown. When this setting is configured, only selected languages are shown. All other languages are hidden.</p> <p>This setting also defines the order of languages in the selection. The first language is used as default.</p> Example:<pre><code>PREFERRED_LANGUAGES=\"de-DE,en-US\"\n</code></pre>"},{"location":"setup/configuration/#archiving","title":"Archiving","text":"<p> Pro only</p> <p>Archived projects require at least <code>ARCHIVING_THRESHOLD</code> number of users to restore the archive (see https://docs.sysreptor.com/reporting/archiving/).  By default two users are required, enforcing a 4-eye principle. If <code>ARCHIVING_THRESHOLD=1</code> every user is able to restore archived projects on their own, disabling the 4-eye principle. Changing this setting does not affect previously archived projects. </p> Example:<pre><code>ARCHIVING_THRESHOLD=2\n</code></pre> <p>The process of archiving finished projects and deleting old archives can be automated by following settings. The values are time spans in days.</p> Example:<pre><code># Automatically archive finished projects after 3 months\nAUTOMATICALLY_ARCHIVE_PROJECTS_AFTER=90\n# Automatically delete archived projects after 2 years\nAUTOMATICALLY_DELETE_ARCHIVED_PROJECTS_AFTER=730\n</code></pre>"},{"location":"setup/configuration/#private-designs","title":"Private Designs","text":"<p>Users without Designer permission can create and edit private designs that cannot be read or used by other users. If a pentest project is created using a private design, a copy of the private design becomes accessible by project members. Use this setting to enable private designs.</p> Example:<pre><code>ENABLE_PRIVATE_DESIGNS=true\n</code></pre>"},{"location":"setup/configuration/#guest-users","title":"Guest Users","text":"<p>Restrict capabilities of guest users.</p> Example:<pre><code>GUEST_USERS_CAN_CREATE_PROJECTS=True\nGUEST_USERS_CAN_IMPORT_PROJECTS=False\nGUEST_USERS_CAN_UPDATE_PROJECT_SETTINGS=True\nGUEST_USERS_CAN_DELETE_PROJECTS=True\n</code></pre>"},{"location":"setup/configuration/#s3-storage","title":"S3 Storage","text":"<p>Uploaded files (except images, images are also encrypted) in notes can be uploaded to an S3 bucket. Files are stored on the filesystem in a docker volume by default. If data at rest encryption is configured files are encrypted.</p> Example:<pre><code>UPLOADED_FILE_STORAGE=\"s3\"  # Default: \"filesystem\"\nUPLOADED_FILE_S3_ACCESS_KEY=\"access-key\"\nUPLOADED_FILE_S3_SECRET_KEY=\"secret-key\"\nUPLOADED_FILE_S3_SESSION_TOKEN=\"session-token\"  # optional\nUPLOADED_FILE_S3_BUCKET_NAME=\"bucket-name\"\nUPLOADED_FILE_S3_ENDPOINT_URL=\"endpoint-url\"\n</code></pre> <p>Archived project files can also be uploaded to an S3 bucket. Archives are stored on the filesystem in a docker volume by default.</p> Example<pre><code>ARCHIVED_FILE_STORAGE=\"s3\"  # Default: \"filesystem\"\nARCHIVED_FILE_S3_ACCESS_KEY=\"access-key\"\nARCHIVED_FILE_S3_SECRET_KEY=\"secret-key\"\nARCHIVED_FILE_S3_SESSION_TOKEN=\"session-token\"  # optional\nARCHIVED_FILE_S3_BUCKET_NAME=\"bucket-name\"\nARCHIVED_FILE_S3_ENDPOINT_URL=\"endpoint-url\"\n</code></pre>"},{"location":"setup/configuration/#backup-key","title":"Backup Key","text":"<p> Pro only</p> <p>API key used for creating backups via REST API. The key should be random and must have 20 or more characters. Find more information at https://docs.sysreptor.com/backups/. Make sure this key remains secret.</p> Generate random backup key:<pre><code>printf \"BACKUP_KEY=$(openssl rand -base64 25 | tr -d '\\n=')\\n\"\n</code></pre> Example (do not use this value!):<pre><code>BACKUP_KEY=\"WfyqYzRVZAOFbCtltYEFN36XBzRz6Ys6ZA\"\n</code></pre>"},{"location":"setup/configuration/#compress-images","title":"Compress Images","text":"<p>Uploaded images are compressed to reduce file size, but to retain quality suitable for PDF files. Disable image compression using this setting.</p> Example:<pre><code>COMPRESS_IMAGES=false\n</code></pre>"},{"location":"setup/installation/","title":"Prerequisites","text":""},{"location":"setup/installation/#server","title":"Server","text":"<p> Self-Hosted</p> <ul> <li>Ubuntu</li> <li>4GB RAM</li> <li>Latest Docker (with docker-compose-plugin)</li> </ul>"},{"location":"setup/installation/#client","title":"Client","text":"<p> Cloud \u00b7  Self-Hosted</p> <ul> <li>Network connection to the server</li> <li>Up-to-date desktop browser, one of:<ul> <li>Chrome</li> <li>Edge</li> <li>Firefox</li> <li>Safari</li> </ul> </li> </ul>"},{"location":"setup/installation/#installation","title":"Installation","text":"<p> Self-Hosted</p> Installation via ScriptManual Installation <p>Installation via script is the easiest option. You need (official) Docker  installed.</p> <p>Install additional requirements of script installation: <pre><code>sudo apt update\nsudo apt install sed curl openssl uuid-runtime coreutils\n</code></pre></p> <p>The user running the installation script must have the permission to use docker. Download and run:</p> ProfessionalCommunity <pre><code>export SYSREPTOR_LICENSE='your_license_key' \ncurl -s https://docs.sysreptor.com/install.sh | bash\n</code></pre> <pre><code>curl -s https://docs.sysreptor.com/install.sh | bash\n</code></pre> <p>The installation script creates a new <code>sysreptor</code> directory holding the source code and everything you need. It will build a docker image, create volumes and secrets and bring up your containers.</p> <p>You need (official) Docker  installed.</p> <p>Download and extract the latest SysReptor release: <pre><code>curl -s -L --output sysreptor.tar.gz https://github.com/syslifters/sysreptor/releases/latest/download/source-prebuilt.tar.gz\ntar xzf sysreptor.tar.gz\n</code></pre></p> <p>Create your <code>app.env</code>: <pre><code>cd sysreptor/deploy\ncp app.env.example app.env\n</code></pre></p> <p>Generate Django secret key and add to <code>app.env</code>: <pre><code>printf \"SECRET_KEY=\\\"$(openssl rand -base64 64 | tr -d '\\n=')\\\"\\n\"\n</code></pre></p> <p>Generate data at rest encryption keys and add to <code>app.env</code>: <pre><code>KEY_ID=$(uuidgen) &amp;&amp; printf \"ENCRYPTION_KEYS=[{\\\"id\\\": \\\"${KEY_ID}\\\", \\\"key\\\": \\\"$(openssl rand -base64 32)\\\", \\\"cipher\\\": \\\"AES-GCM\\\", \\\"revoked\\\": false}]\\nDEFAULT_ENCRYPTION_KEY_ID=\\\"${KEY_ID}\\\"\\n\"\n</code></pre></p> <p>Optional: Add Professional license key to <code>app.env</code>: <pre><code>LICENSE=\"&lt;your license key&gt;\"\n</code></pre></p> <p>Create docker volumes: <pre><code>docker volume create sysreptor-db-data\ndocker volume create sysreptor-app-data\n</code></pre></p> <p>Build Docker image and run container:</p> ProfessionalCommunity <pre><code>docker compose up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml up -d\n</code></pre> <p><code>-f docker-compose.yml</code> is specified for Community only to avoid inclusion of Docker Compose Override. This avoids to run an additional Docker container for spell checking and saves resources.</p> <p>Add initial superuser: <pre><code>username=reptor\ndocker compose exec app python3 manage.py createsuperuser --username \"$username\"\n</code></pre></p> <p>Add demo data: <pre><code># Projects\nurl=\"https://docs.sysreptor.com/assets/demo-projects.tar.gz\"\ncurl -s \"$url\" | docker compose exec --no-TTY app python3 manage.py importdemodata --type=project --add-member=\"$username\"\n\n# Designs\nurl=\"https://docs.sysreptor.com/assets/demo-designs.tar.gz\"\ncurl -s \"$url\" | docker compose exec --no-TTY app python3 manage.py importdemodata --type=design\n\n# Finding templates\nurl=\"https://docs.sysreptor.com/assets/demo-templates.tar.gz\"\ncurl -s \"$url\" | docker compose exec --no-TTY app python3 manage.py importdemodata --type=template\n</code></pre></p> <p>Access your application at http://127.0.0.1:8000/.</p> <p>We recommend to use a webserver like nginx or Apache and to enable https.</p> <p>Further configurations can be edited in <code>sysreptor/deploy/app.env</code>.</p>"},{"location":"setup/installation/#upgrade-to-professional","title":"Upgrade to Professional","text":"<ol> <li>Add your license key to <code>deploy/app.env</code> (<code>LICENSE='your_license_key'</code>)</li> <li><code>cd</code> to <code>deploy/</code> and run <code>docker compose up -d</code></li> <li>Enjoy</li> </ol>"},{"location":"setup/network/","title":"Network Settings","text":"<p> Self-Hosted</p>"},{"location":"setup/network/#bind-to-different-port-or-interface","title":"Bind to different port or interface","text":"<p>SysReptor is bound to port 8000 on localhost by default. If you want to bind it to a different port, use the <code>BIND_PORT</code> environment variable and restart your containers from the <code>deploy</code> directory.  </p> <p>The format is <code>IP:HOST_PORT:CONTAINER_PORT</code>(note that <code>CONTAINER_PORT</code> should always be 8000).</p> Examples:<pre><code>export BIND_PORT=\"127.0.0.1:8000:8000\"\nexport BIND_PORT=\"127.0.0.1:80:8000\"  # Bind to localhost port 80\nexport BIND_PORT=\"8000:8000\"  # Bind to all interfaces\nexport BIND_PORT=\"1.1.1.1:8000:8000\"  # Bind to dedicated interface\n</code></pre> ProfessionalCommunity Export port variable and run container<pre><code>export BIND_PORT=\"127.0.0.1:8000:8000\"\ncd deploy\ndocker compose up -d\n</code></pre> Export port variable and run container<pre><code>export BIND_PORT=\"127.0.0.1:8000:8000\"\ncd deploy\ndocker compose -f docker-compose.yml up -d\n</code></pre> <p>Binding SysReptor to a publicly reachable network port exposes the application to untrusted networks without encryption. We recommend setting up a web server.</p> <p>Make sure that environment variables are set persistently, e.g. by adding the <code>export</code> command to your <code>~/.profile</code>.</p>"},{"location":"setup/network/#proxy-configuration","title":"Proxy Configuration","text":"<p>We pass the proxy environment variables (<code>HTTP_PROXY</code> and <code>HTTPS_PROXY</code>) from your host system into the Docker containers. To use a proxy, set those variables on your host system and start your containers from the <code>deploy</code> directory.</p> ProfessionalCommunity Export proxy variables and run container<pre><code>export HTTP_PROXY=\"http://192.168.0.111:8080\"\nexport HTTPS_PROXY=\"http://192.168.0.111:8080\"\ncd deploy\ndocker compose up -d\n</code></pre> Export proxy variables and run container<pre><code>export HTTP_PROXY=\"http://192.168.0.111:8080\"\nexport HTTPS_PROXY=\"http://192.168.0.111:8080\"\ncd deploy\ndocker compose -f docker-compose.yml up -d\n</code></pre> <p>The proxy server must be reachable from container</p> <p>Make sure that the proxy server is reachable from inside your docker container. Loopback addresses (e. g. <code>127.0.0.1</code>) or <code>localhost</code> will not work.</p> <p>Make sure that environment variables are set persistently, e.g. by adding the <code>export</code> command to your <code>~/.profile</code>.</p>"},{"location":"setup/network/#ca-certificates","title":"CA Certificates","text":"<p>Your proxy server will probably not have a publicly trusted CA certificate. Build your Docker image with custom CA certificates:</p> ProfessionalCommunity Set CA certificate, build and run<pre><code>cd deploy\nexport SYSREPTOR_CA_CERTIFICATES=\"-----BEGIN CERTIFICATE-----\\nMIIDqDCCApCgAwIBAgIFAMjv7sswDQYJKoZIhv...\"\ndocker compose up -d --build\n</code></pre> Set CA certificate, build and run<pre><code>cd deploy\nexport SYSREPTOR_CA_CERTIFICATES=\"-----BEGIN CERTIFICATE-----\\nMIIDqDCCApCgAwIBAgIFAMjv7sswDQYJKoZIhv...\"\ndocker compose -f docker-compose.yml up -d --build\n</code></pre> <p>Make sure that environment variables are set persistently, e.g. by adding the <code>export</code> command to your <code>~/.profile</code>.</p>"},{"location":"setup/updates/","title":"Updates","text":"<p> Self-Hosted</p> <p>We recommend to create a backup of your installation before updating.</p> Update via Script (recommended)Manual update <p>We deliver the shell script <code>update.sh</code> in the <code>sysreptor</code> directory.</p> <p>If updates are available, the script downloads the release from GitHub. It rebuilds your Docker images and restarts all containers. If no updates are available, the script checks when the Docker images were last built. If the last build date was more then seven days ago, the Docker images are rebuilt to ensure that all base images and dependencies are up to date.</p> <p>Use the <code>--force</code> option to force rebuilding the Docker images.</p> <p>Your current SysReptor directory will be renamed for backup purposes. The script will download the newer version and place it into the directory where the old version was.</p> <p>It will then copy your <code>app.env</code> to the right location of your newer version. The new docker images are build and launched.</p> Run update script:<pre><code>bash sysreptor/update.sh\n</code></pre> <p>Download and extract the latest SysReptor release: <pre><code>curl -s -L --output sysreptor.tar.gz https://github.com/syslifters/sysreptor/releases/latest/download/source-prebuilt.tar.gz\ntar xzf sysreptor.tar.gz\n</code></pre></p> <p>Copy <code>deploy/app.env</code> from your old installation to the new installation.</p> <p><code>cd</code> to <code>sysreptor/deploy</code>. Then, build Docker images and launch containers: Community:<pre><code>docker compose -f docker-compose.yml up -d --build\n</code></pre></p> Professional:<pre><code>docker compose up -d --build\n</code></pre>"},{"location":"setup/updates/#recommended-automatic-updates","title":"Recommended: Automatic updates","text":"<p>We recommend to deploy automatic updates and run the script once per day. This ensures you receive updates early and you regularly update all dependencies and base images.</p> <p>If <code>cron</code> is not installed, install and start: <pre><code>sudo apt update\nsudo apt install cron\nsudo systemctl start cron\n#sudo /etc/init.d/cron start\n</code></pre></p> <p>Open <code>crontab</code>: <pre><code>crontab -e\n</code></pre></p> <p>Schedule your update, e.g. every day at midnight: <pre><code>0 0 * * * /bin/bash /home/yourpath/sysreptor/update.sh\n</code></pre></p> <p>Make sure your user has write permissions to the parent directory of your SysReptor directory. In this example, you need write permissions to <code>/home/yourpath/</code>.</p>"},{"location":"setup/webserver/","title":"Setup Webserver","text":"<p> Self-Hosted</p> <p>The Django webserver is not recommended due to missing transport encryption, missing performance and security tests. We recommend a webserver like Caddy, nginx or Apache and to enable https.</p> Caddy (recommended)nginx <p>Caddy is an open-source webserver with automatic HTTPS written in Go.</p> <p>Setup your DNS A-record pointing to your server. Make sure that ports 443 and 80 are publicly available. (You need port 80 for getting your LetEncrypt certificate.)</p> <p>Create a <code>docker-compose.yml</code> (e.g. in a <code>caddy</code> directory outside your SysReptor files):</p> <pre><code>version: '3.9'\nname: caddy\n\nservices:\n  caddy:\n    image: caddy:latest\n    container_name: 'sysreptor-caddy'\n    restart: unless-stopped\n    command: caddy reverse-proxy --from https://&lt;your-domain&gt;:443 --to http://127.0.0.1:8000\n    volumes:\n    - type: volume\n      source: sysreptor-caddy-data\n      target: /data\n    network_mode: \"host\"\n\nvolumes:\n  sysreptor-caddy-data:\n    name: sysreptor-caddy-data\n</code></pre> <p>Don't forget to replace <code>&lt;your-domain&gt;</code> by your domain.</p> <p><code>docker compose up -d</code> and enjoy.</p> <p>You can install nginx on your host system:</p> <pre><code>sudo apt-get update\nsudo apt-get install nginx\n</code></pre> <p>Copy our nginx boilerplate configuration from the <code>deploy</code> directory to your nginx directory:</p> <pre><code>sudo cp deploy/sysreptor.nginx /etc/nginx/sites-available/\nsudo ln -s /etc/nginx/sites-available/sysreptor.nginx /etc/nginx/sites-enabled/\nsudo rm /etc/nginx/sites-enabled/default\n</code></pre> <p>You can optionally generate self-signed certificates: <pre><code>sudo apt-get update\nsudo apt-get install ssl-cert\nsudo make-ssl-cert generate-default-snakeoil\n</code></pre></p> <p>Modify <code>sysreptor.nginx</code> and update the certificate paths in case you have trusted certificates (recommended).</p> <p>(Re)Start nginx: <pre><code>sudo systemctl restart nginx\n# sudo /etc/init.d/nginx restart\n</code></pre></p>"},{"location":"show-and-tell/2023/06/12/2fa-for-all/","title":"2FA for all!","text":"<p>2FA is also available in SysReptor community. We support:</p> <ul> <li>FIDO2/Webauthn</li> <li>TOTP (e.g. Google Authenticator)</li> <li>Backup Codes</li> </ul> <p></p>"},{"location":"show-and-tell/2023/06/26/add-chart-to-report/","title":"Add chart to report","text":""},{"location":"show-and-tell/2023/05/30/bulk-edit-list-objects/","title":"Bulk edit list objects","text":""},{"location":"show-and-tell/2023/06/26/change-colors-in-your-pentest-report/","title":"Change colors in your pentest report","text":""},{"location":"show-and-tell/2023/05/30/copy-and-paste-image-to-pentest-report/","title":"Copy and paste image to pentest report","text":"<p>Copy + Paste: As easy as falling off a log.</p> <p></p>"},{"location":"show-and-tell/2023/06/05/create-findings-from-templates/","title":"Create findings from templates","text":""},{"location":"show-and-tell/2023/05/30/builtin-cvss-editor/","title":"Builtin CVSS editor","text":"<p>Set metrics, get vector, score and severity.</p> <p></p>"},{"location":"show-and-tell/2023/06/05/not-only-easy-secure-by-design/","title":"Not only easy. Secure by design.","text":""},{"location":"show-and-tell/2023/06/05/feature-request-github-discussions/","title":"Feature Request? GitHub Discussions!","text":"<p>https://github.com/Syslifters/sysreptor/discussions/</p> <p></p>"},{"location":"show-and-tell/2023/06/12/use-guest-permissions-for-subcontractors/","title":"Use guest permissions for subcontractors","text":"<p>Guest users cannot list your SysReptor users. Permissions can be further restricted to:</p> <ul> <li>create projects (default: yes)</li> <li>import projects (default: no)</li> <li>update project settings (default: yes)</li> <li>delete projects (default: yes)</li> </ul> <p>See also: https://docs.sysreptor.com/setup/user-permissions/#guest</p> <p></p>"},{"location":"show-and-tell/2023/08/03/add-images-to-finding-templates/","title":"Add images to finding templates","text":""},{"location":"show-and-tell/2023/05/25/use-markdown-in-html-in-the-report-designer/","title":"Use markdown in HTML in the report designer.","text":""},{"location":"show-and-tell/2023/08/03/multilanguage-finding-templates/","title":"Multilanguage finding templates","text":""},{"location":"show-and-tell/2023/06/05/need-help-post-us-at-github-discussions/","title":"Need help? Post us at GitHub Discussions!","text":"<p>https://github.com/Syslifters/sysreptor/discussions/</p> <p></p>"},{"location":"show-and-tell/2023/05/30/offsec-certification-reporting/","title":"OffSec certification reporting","text":"<p>Our free lab for OffSec certifications now includes reports for:</p> <ul> <li>OSWA - Offensive Security Web Assessor</li> <li>OSED - Offensive Security Exploit Developer</li> <li>OSMR - Offensive Security macOS Researcher</li> <li>OSDA - Offensive Security Defense Analyst</li> </ul> <p>All available report templates are: OSCP/PWK, OSWP/WNA, OSEP/ETBD, OSWA/WAKL, OSWE/AWAE, OSED/WUMED, OSMR/MCB, OSEE/AWE, OSDA/SODA</p> <p></p>"},{"location":"show-and-tell/2023/05/30/note-taking-included/","title":"Note taking included","text":""},{"location":"show-and-tell/2023/06/12/project-archiving-with-encryption/","title":"Project Archiving with Encryption","text":"<p>Archived projects are encrypted. You can define that they can be decrypted following four-eyes principle only.</p> <p>One pentester alone has no access. And we as the cloud provider? No access to archived projects!</p> <p></p>"},{"location":"show-and-tell/2023/09/21/push-finding-via-cli/","title":"Push finding via CLI","text":""},{"location":"show-and-tell/2023/05/30/reference-images-in-your-pentest-report/","title":"Reference images in your pentest report","text":"<p>More at: https://docs.sysreptor.com/reporting/references/</p> <p></p>"},{"location":"show-and-tell/2023/09/21/render-report-via-cli-and-upload-to-notes/","title":"Render report via CLI and upload to notes","text":""},{"location":"show-and-tell/2023/06/26/preview-sysreptor-cli-formats-and-uploads-tool-outputs/","title":"Preview: SysReptor CLI formats and uploads tool outputs.","text":""},{"location":"show-and-tell/2023/05/30/single-sign-on/","title":"Single Sign-On","text":"<p>We support SSO with OIDC/oAuth2.</p> <ul> <li>Azure AD</li> <li>Google Workplace/Google Identity.</li> <li>Need another integration? Drop us a message at GitHub Discussions!</li> </ul> <p></p>"},{"location":"show-and-tell/2023/06/26/spellcheck-in-sysreptor-professional/","title":"Spellcheck in SysReptor Professional","text":""},{"location":"show-and-tell/2023/05/25/sudo-to-superuser/","title":"SUDO to Superuser","text":"<p>Superusers have standard privileges, until they elevate their permissions using \"sudo\".</p> <p></p>"},{"location":"show-and-tell/2023/05/30/sysreptor-why-sysreptor/","title":"SysReptor? Why SysReptor?","text":""},{"location":"show-and-tell/2023/08/03/create-template-from-finding/","title":"Create template from finding","text":""},{"location":"show-and-tell/2023/05/25/keep-dependencies-up-to-date/","title":"Keep dependencies up to date","text":"<p>Set up a daily cron job:</p> <p>Our update script rebuilds your Docker images every seven days. This makes sure that all dependencies are kept up to date:</p> <ul> <li>Docker base images</li> <li>Python</li> <li>Debian packages</li> <li>Chromium</li> <li>...</li> </ul>"},{"location":"show-and-tell/2023/06/05/store-your-evidence-files-in-notes/","title":"Store your evidence files in notes","text":"<p>Add #zip, #burp, #tar, #pdf, etc.</p> <p></p>"},{"location":"show-and-tell/2023/09/22/version-history/","title":"Version History","text":"<p>Access previous versions of your findings.</p> <p></p>"},{"location":"show-and-tell/2023/06/12/found-a-vulnerability/","title":"Found a vulnerability?","text":"<p>Find our Vulnerability Disclosure Policy: https://docs.syslifters.com/en/vulnerability-disclosure/</p> <p></p>"},{"location":"users/forgot-password/","title":"Forgot Password?","text":"<p> Self-Hosted</p> <p>You can reset your password via the command line. Go to <code>sysreptor/deploy</code> and run:</p> <pre><code>username=reptor\ndocker compose exec app python3 manage.py changepassword \"$username\"\n</code></pre>"},{"location":"users/oidc-azure-active-directory/","title":"Azure Active Directory OIDC Configuration","text":"<p> Pro only</p>"},{"location":"users/oidc-azure-active-directory/#configuration-in-azure-ad","title":"Configuration in Azure AD","text":"<ol> <li>Open Microsoft Entra Admin Center</li> <li>Select Applications -&gt; App registrations -&gt; New registration</li> <li> <p>In following menu: </p> <ul> <li>Enter a Name for your reference (1)</li> <li>Select the types of accounts who are allowed to login (2) - this is the first option \"Single tenant\" in most cases</li> <li>Enter the redirect url of your application in the following format: https://your.url/login/oidc/azure/callback (3)</li> <li>Select type \"Web\" for redirect url (4)</li> </ul> <p></p> </li> <li> <p>In the newly created \"App registration\", go to the Token configuration submenu and add the following optional claim:</p> <ul> <li>TokenType: ID</li> <li>Claims: auth_time, login_hint </li> </ul> </li> <li> <p>Next go to the \"Certificates &amp; Secrets\" submenu and add a new client secret with 24 months validity (this is the maximum) and any description.</p> </li> <li>Copy the value of the newly created secret and store it for later use.</li> <li>Finally go to the \"Overview\" submenu and copy the values Application (client) ID and Directory (tenant) ID.</li> </ol> <p>You should now have the following values:</p> <ul> <li>Client ID</li> <li>Client secret</li> <li>Azure tendant ID</li> </ul>"},{"location":"users/oidc-azure-active-directory/#cloud-setup","title":"Cloud Setup","text":"<p> Cloud</p> <p>You are lucky. Just send the values from the previous steps to us and we'll take care </p>"},{"location":"users/oidc-azure-active-directory/#self-hosted-setup","title":"Self-Hosted Setup","text":"<p> Self-Hosted</p> <p>The values from the previous steps need to be passed as environment variables to the SysReptor docker container. You can add them to <code>&lt;sysreptor-repository&gt;/deploy/app.env</code>: <pre><code>OIDC_AZURE_TENANT_ID=&lt;azure tenant id&gt;\nOIDC_AZURE_CLIENT_ID=&lt;azure client id&gt;\nOIDC_AZURE_CLIENT_SECRET=&lt;azure client secret&gt;\n</code></pre></p> <p>The OIDC client needs to be able to establish a network connection to Azure AD. Make sure to not block outgoing traffic.</p> <p>Restart the docker container by going to <code>sysreptor/deploy</code> and:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"users/oidc-generic/","title":"Generic OIDC Configuration","text":"<p> Pro only</p>"},{"location":"users/oidc-generic/#configuration-at-your-oidc-provider","title":"Configuration at your OIDC provider","text":"<ol> <li>Create a <code>client_id</code> and a <code>client_secret</code> in your OIDC provider</li> <li>Add the callback-url: https://<code>&lt;your-installation&gt;</code>/login/oidc/<code>&lt;your-provider-name&gt;</code>/callback<ul> <li>Add the hostname where your SysReptor installation can be accessed.</li> <li>Choose a custom provider name (e. g. <code>keycloak</code>)</li> </ul> </li> </ol>"},{"location":"users/oidc-generic/#cloud-setup","title":"Cloud Setup","text":"<p> Cloud</p> <p>You are lucky. Just send the values from the previous steps to us and we'll take care </p>"},{"location":"users/oidc-generic/#self-hosted-setup","title":"Self-Hosted Setup","text":"<p> Self-Hosted</p> <p>Create your OIDC configuration for SysReptor...</p> <pre><code>{\n\"&lt;your provider name&gt;\": {\n\"label\": \"&lt;human readable provider name&gt;\",\n\"client_id\": \"&lt;your client_id&gt;\",\n\"client_secret\": \"&lt;your_client_secret&gt;\",\n\"server_metadata_url\": \"&lt;link to OIDC provider's openid-configuration&gt;\",\n\"client_kwargs\": {\n\"scope\": \"openid email\",\n\"code_challenge_method\": \"S256\"\n},\n\"reauth_supported\": false\n}\n}\n</code></pre> <pre><code>OIDC_AUTHLIB_OAUTH_CLIENTS='\"&lt;your provider name&gt;\": {\"label\": \"&lt;human readable provider name&gt;\",...''\n</code></pre>"},{"location":"users/oidc-generic/#limitations","title":"Limitations","text":"<p>SysReptor reauthenticates users before critical actions. It therefore requires users to enter their authentication details (e.g. password and second factor, if configured).</p> <p>Your OIDC provider might not support enforced reauthentication. Your can try to set <code>\"reauth_supported\": true</code>. If the \"SUDO\" functionality does not work, set to this value to <code>false</code>.</p> <p>To enforce reauthentication, users can set a password for their local SysReptor user. This will enforce reauthentication with the local user's credentials.</p>"},{"location":"users/oidc-google/","title":"Google OIDC Configuration","text":"<p> Pro only</p>"},{"location":"users/oidc-google/#configuration-at-google","title":"Configuration at Google","text":"<ol> <li> <p>Open Google Cloud Console</p> <ul> <li>Make sure to select the correct organization:</li> </ul> <p></p> </li> <li> <p>Use search box and click \"Create a Project\"</p> <p></p> </li> <li> <p>Enter Name, Organization, Location and \"Create\"</p> <p></p> </li> <li> <p>Search for and call \"OAuth consent screen\"</p> </li> <li> <p>Select \"Internal\" for \"User Type\" and \"Create\"</p> <p></p> </li> <li> <p>Enter \"App information\"</p> <p></p> </li> <li> <p>Optional: Add App logo</p> <ul> <li>You can use this</li> </ul> </li> <li> <p>Enter App domain info</p> <p></p> </li> <li> <p>Enter Developer contact information and click \"Save and Continue\"</p> <p></p> </li> <li> <p>Add the scopes <code>email</code>, <code>profile</code>, <code>openid</code> (don't forget to click \"Update\")</p> <p></p> </li> <li> <p>Click \"Save and Continue\" and verify your data</p> </li> <li> <p>Go to \"Credentials\", \"Create Credentials\" and select \"OAuth client ID\"</p> <p></p> </li> <li> <p>Select \"Web Application\" at \"Application type\" and enter a name</p> <p></p> </li> <li> <p>You don't need any JavaScript origins</p> </li> <li> <p>Enter the URL to your SysReptor installation with the path <code>/login/oidc/google/callback</code> as Authorized redirect URI</p> <p></p> </li> <li> <p>Click \"Create\"</p> </li> </ol> <p>You should now have the following values:</p> <ul> <li>Client ID</li> <li>Client secret</li> </ul>"},{"location":"users/oidc-google/#cloud-setup","title":"Cloud Setup","text":"<p> Cloud</p> <p>You are lucky. Just send the values from the previous steps to us and we'll take care </p>"},{"location":"users/oidc-google/#self-hosted-setup","title":"Self-Hosted Setup","text":"<p> Self-Hosted</p> <p>The values from the previous steps need to be passed as environment variables to the SysReptor docker container. You can add them to <code>&lt;sysreptor-repository&gt;/deploy/app.env</code>: <pre><code>OIDC_GOOGLE_CLIENT_ID=&lt;google client id&gt;\nOIDC_GOOGLE_CLIENT_SECRET=&lt;google client secret&gt;\n</code></pre></p> <p>The OIDC client needs to be able to establish a network connection to Google. Make sure to not block outgoing traffic.</p> <p>Restart the docker container by going to <code>sysreptor/deploy</code> and:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"users/oidc-google/#limitations","title":"Limitations","text":"<p>SysReptor reauthenticates users before critical actions. It therefore requires users to enter their authentication details (e.g. password and second factor, if configured).</p> <p>Google does not support enforced reauthentication. The reauthentication therefore redirects to Google. If the users are still authenticated at Google, they are redirected back and SysReptor regards the reauthentication as successful.</p> <p>This is a limitation by Google.</p> <p>To enforce reauthentication, users can set a password for their local SysReptor user. This will enforce reauthentication with the local user's credentials.</p>"},{"location":"users/oidc-keycloak/","title":"Keycloak OIDC Configuration","text":"<p> Pro only</p>"},{"location":"users/oidc-keycloak/#configuration-at-your-oidc-provider","title":"Configuration at your OIDC provider","text":"<ol> <li>Create new Keycloak client for authentication and generate <code>client_id</code> and a <code>client_secret</code></li> <li>Add the callback-url: https://<code>&lt;your-installation&gt;</code>/login/oidc/keycloak/callback<ul> <li>Add the hostname where your SysReptor installation can be accessed.</li> </ul> </li> </ol>"},{"location":"users/oidc-keycloak/#cloud-setup","title":"Cloud Setup","text":"<p> Cloud</p> <p>You are lucky. Just send the values from the previous steps to us and we'll take care </p>"},{"location":"users/oidc-keycloak/#self-hosted-setup","title":"Self-Hosted Setup","text":"<p> Self-Hosted</p> <p>Create your OIDC configuration for SysReptor...</p> <pre><code>{\n\"keycloak\": {\n\"label\": \"Keycloak\",\n\"client_id\": \"&lt;client-id&gt;\",\n\"client_secret\": \"&lt;client-secret&gt;\",\n\"server_metadata_url\": \"https://keycloak.example.com/auth/realms/dev/.well-known/openid-configuration\",\n\"client_kwargs\": {\n\"scope\": \"openid email\",\n\"code_challenge_method\": \"S256\"\n},\n\"reauth_supported\": false\n}\n}\n</code></pre> <p>...and add it to your <code>app.env</code>:</p> <pre><code>OIDC_AUTHLIB_OAUTH_CLIENTS='\"keycloak\": {\"label\": \"Keycloak\",...''\n</code></pre>"},{"location":"users/oidc-keycloak/#limitations","title":"Limitations","text":"<p>SysReptor reauthenticates users before critical actions. It therefore requires users to enter their authentication details (e.g. password and second factor, if configured).</p> <p>Your Keycloak installation might not support enforced reauthentication. Your can try to set <code>\"reauth_supported\": true</code>. If the \"SUDO\" functionality does not work, set to this value to <code>false</code>.</p> <p>To enforce reauthentication, users can set a password for their local SysReptor user. This will enforce reauthentication with the local user's credentials.</p>"},{"location":"users/oidc-setup/","title":"SSO Setup with OIDC","text":"<p> Pro only</p> <ol> <li>Configure your Identity Provider (IDP) and add configuration details to your <code>app.env</code><ul> <li>Azure Active Directory</li> <li>Google Workplace/Google Identity</li> <li>Keycloak</li> <li>Generic OIDC setup</li> <li>Need documentation for another IDP? Drop us a message at GitHub Discussions!</li> </ul> </li> <li>Restart containers using <code>docker-compose up -d</code> in <code>deploy</code> directory</li> <li> <p>Set up local users:</p> <p>a. Create user that should use SSO b. Go to \"Identities\" c. Add identity (\"Add\") d. Select Provider and enter the email address used at your IDP (note: the identifier is case sensitive and has to be the same case as in the SSO provider)</p> </li> </ol> <p></p> <p>The user can now login via his IDP.</p>"},{"location":"users/user-permissions/","title":"User Permissions","text":"<p> Pro only</p>"},{"location":"users/user-permissions/#users-without-dedicated-permissions","title":"Users without dedicated Permissions","text":"<p>Users without dedicated permissions have access to the frontend as regular pentesters.  They have only read-write access to pentesting reports they are assigned to. They cannot read other pentesting reports.</p>"},{"location":"users/user-permissions/#superuser","title":"Superuser","text":"<p>Superusers have the highest privileges available. They have all permissions without explicitly assigning them. They can access all projects, even if they are not members.</p> <p>Note: The permissions of superusers are restricted after login. Superusers must elevate their privileges via the \"sudo\" button in the toolbar (Pro only). This requires the user to reauthenticate with his password and (if enabled) his second factor.</p>"},{"location":"users/user-permissions/#user-manager","title":"User Manager","text":"<p>User Managers can create and update other users, assign permissions and reset passwords (except superusers).</p> <p>Users without this permission can only update their own user information (e.g. name, email, phone number), change their own password, but are not allowed to modify their permissions.</p>"},{"location":"users/user-permissions/#designer","title":"Designer","text":"<p>Designers can create and edit report designs. Users without this permission can create and edit private designs that cannot be used by other users. They have read access to non-private designs.</p>"},{"location":"users/user-permissions/#template-editor","title":"Template Editor","text":"<p>Template Editors are allowed to create and edit finding templates. Users without this permission have only read access to templates.</p>"},{"location":"users/user-permissions/#guest","title":"Guest","text":"<p>Guest users have read-write access to projects they are assigned to.</p> <p>Guest are not allowed to list other users and might be further restricted by the system operator:</p> <ul> <li>create projects (default: yes)</li> <li>import projects (default: no)</li> <li>update project settings (default: yes)</li> <li>delete projects (default: yes)</li> </ul> <p> Cloud \u00b7 Please contact us and we will reconfigure your installation.</p> <p> Self-Hosted</p> <p>Configure your installation by adding the following settings to your <code>app.env</code>: <pre><code>GUEST_USERS_CAN_CREATE_PROJECTS=True\nGUEST_USERS_CAN_IMPORT_PROJECTS=False\nGUEST_USERS_CAN_UPDATE_PROJECT_SETTINGS=True\nGUEST_USERS_CAN_DELETE_PROJECTS=True\n</code></pre></p>"},{"location":"users/user-permissions/#system","title":"System","text":"<p>System is a special privilege that allows users to create backups via API. This privilege can only be set via the Django interface:</p> <ol> <li>Log in with superuser permissions</li> <li>Elevate your privileges using the \"sudo\" button</li> <li>Access https://sysreptor.example.com/admin/users/pentestuser/</li> <li>Choose the user</li> <li>Tick \"Is system user\"</li> <li>Save</li> </ol> <p>The <code>system</code> permission should only be used for backups.</p>"},{"location":"show-and-tell/page/2/","title":"Show and Tell","text":""},{"location":"show-and-tell/page/3/","title":"Show and Tell","text":""}]}